
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000047a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000406  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  0000047a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000004ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b56  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c8  00000000  00000000  000010c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000612  00000000  00000000  0000188a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  00001e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000480  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000048e  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002922  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <__vector_1>
   8:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e0       	ldi	r30, 0x06	; 6
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 20 01 	call	0x240	; 0x240 <main>
  9e:	0c 94 01 02 	jmp	0x402	; 0x402 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
}

void toggleLight() {
	PORTB |= (1<<0);
	PORTB |= (1<<1);
	PORTB |= (1<<2);
  a6:	38 9a       	sbi	0x07, 0	; 7
  a8:	39 9a       	sbi	0x07, 1	; 7
  aa:	3a 9a       	sbi	0x07, 2	; 7
  ac:	56 9a       	sbi	0x0a, 6	; 10
  ae:	54 9a       	sbi	0x0a, 4	; 10
  b0:	57 9a       	sbi	0x0a, 7	; 10
  b2:	5b 9a       	sbi	0x0b, 3	; 11
  b4:	5a 9a       	sbi	0x0b, 2	; 11
  b6:	5f 9a       	sbi	0x0b, 7	; 11
  b8:	15 bc       	out	0x25, r1	; 37
  ba:	14 bc       	out	0x24, r1	; 36
  bc:	17 bc       	out	0x27, r1	; 39
  be:	84 b1       	in	r24, 0x04	; 4
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	84 b9       	out	0x04, r24	; 4
  c4:	e9 9a       	sbi	0x1d, 1	; 29
  c6:	e8 9a       	sbi	0x1d, 0	; 29
  c8:	e9 e6       	ldi	r30, 0x69	; 105
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	80 83       	st	Z, r24
  d2:	80 81       	ld	r24, Z
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	80 83       	st	Z, r24
  d8:	78 94       	sei
  da:	08 95       	ret

000000dc <initADC>:
  dc:	ec e7       	ldi	r30, 0x7C	; 124
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	80 83       	st	Z, r24
  e6:	ea e7       	ldi	r30, 0x7A	; 122
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	87 60       	ori	r24, 0x07	; 7
  ee:	80 83       	st	Z, r24
  f0:	80 81       	ld	r24, Z
  f2:	80 68       	ori	r24, 0x80	; 128
  f4:	80 83       	st	Z, r24
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	84 b9       	out	0x04, r24	; 4
  fa:	08 95       	ret

000000fc <doADC>:
  fc:	ec e7       	ldi	r30, 0x7C	; 124
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	80 83       	st	Z, r24
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 64       	ori	r24, 0x40	; 64
 10e:	80 83       	st	Z, r24
 110:	80 81       	ld	r24, Z
 112:	86 fd       	sbrc	r24, 6
 114:	fd cf       	rjmp	.-6      	; 0x110 <doADC+0x14>
 116:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 11a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	92 2b       	or	r25, r18
 122:	06 97       	sbiw	r24, 0x06	; 6
 124:	10 f0       	brcs	.+4      	; 0x12a <doADC+0x2e>
 126:	15 b8       	out	0x05, r1	; 5
 128:	08 95       	ret
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	85 b9       	out	0x05, r24	; 5
 12e:	08 95       	ret

00000130 <wait1ms>:
 130:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 134:	80 e6       	ldi	r24, 0x60	; 96
 136:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 13a:	e0 eb       	ldi	r30, 0xB0	; 176
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	82 6c       	ori	r24, 0xC2	; 194
 142:	80 83       	st	Z, r24
 144:	e1 eb       	ldi	r30, 0xB1	; 177
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	85 60       	ori	r24, 0x05	; 5
 14c:	80 83       	st	Z, r24
 14e:	b9 9b       	sbis	0x17, 1	; 23
 150:	fe cf       	rjmp	.-4      	; 0x14e <wait1ms+0x1e>
 152:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	87 bb       	out	0x17, r24	; 23
 15a:	08 95       	ret

0000015c <delay>:
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	18 16       	cp	r1, r24
 166:	19 06       	cpc	r1, r25
 168:	4c f4       	brge	.+18     	; 0x17c <delay+0x20>
 16a:	8c 01       	movw	r16, r24
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 170:	0e 94 98 00 	call	0x130	; 0x130 <wait1ms>
 174:	21 96       	adiw	r28, 0x01	; 1
 176:	0c 17       	cp	r16, r28
 178:	1d 07       	cpc	r17, r29
 17a:	d1 f7       	brne	.-12     	; 0x170 <delay+0x14>
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	08 95       	ret

00000186 <change_duty_cycle>:
	return;
}

int change_duty_cycle(int sensor_read) {
	if (sensor_read > 55) {
 186:	88 33       	cpi	r24, 0x38	; 56
 188:	91 05       	cpc	r25, r1
 18a:	8c f4       	brge	.+34     	; 0x1ae <change_duty_cycle+0x28>
		return 1;
	}
	else if (sensor_read > 45) {
 18c:	8e 32       	cpi	r24, 0x2E	; 46
 18e:	91 05       	cpc	r25, r1
 190:	8c f4       	brge	.+34     	; 0x1b4 <change_duty_cycle+0x2e>
		return 70;
	}
	else if (sensor_read > 35) {
 192:	84 32       	cpi	r24, 0x24	; 36
 194:	91 05       	cpc	r25, r1
 196:	8c f4       	brge	.+34     	; 0x1ba <change_duty_cycle+0x34>
		return 100;
	}
	else if (sensor_read > 20) {
 198:	85 31       	cpi	r24, 0x15	; 21
 19a:	91 05       	cpc	r25, r1
 19c:	8c f4       	brge	.+34     	; 0x1c0 <change_duty_cycle+0x3a>
		return 130;
	}
	else if (sensor_read > 15) {
 19e:	80 31       	cpi	r24, 0x10	; 16
 1a0:	91 05       	cpc	r25, r1
 1a2:	8c f4       	brge	.+34     	; 0x1c6 <change_duty_cycle+0x40>
		return 150;
	}
	else if (sensor_read > 5) {
 1a4:	06 97       	sbiw	r24, 0x06	; 6
 1a6:	94 f4       	brge	.+36     	; 0x1cc <change_duty_cycle+0x46>
		return 200;
	}
	else {
		return 250;
 1a8:	8a ef       	ldi	r24, 0xFA	; 250
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	08 95       	ret
	return;
}

int change_duty_cycle(int sensor_read) {
	if (sensor_read > 55) {
		return 1;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	08 95       	ret
	}
	else if (sensor_read > 45) {
		return 70;
 1b4:	86 e4       	ldi	r24, 0x46	; 70
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	08 95       	ret
	}
	else if (sensor_read > 35) {
		return 100;
 1ba:	84 e6       	ldi	r24, 0x64	; 100
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	08 95       	ret
	}
	else if (sensor_read > 20) {
		return 130;
 1c0:	82 e8       	ldi	r24, 0x82	; 130
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	08 95       	ret
	}
	else if (sensor_read > 15) {
		return 150;
 1c6:	86 e9       	ldi	r24, 0x96	; 150
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	08 95       	ret
	}
	else if (sensor_read > 5) {
		return 200;
 1cc:	88 ec       	ldi	r24, 0xC8	; 200
 1ce:	90 e0       	ldi	r25, 0x00	; 0
	}
	else {
		return 250;
	}
}
 1d0:	08 95       	ret

000001d2 <setOCRA>:

void setOCRA(int value)
{
	TCCR0B = 0;
 1d2:	15 bc       	out	0x25, r1	; 37
	TCNT0 = 0;
 1d4:	16 bc       	out	0x26, r1	; 38
	OCR0A = value;
 1d6:	87 bd       	out	0x27, r24	; 39
	TCCR0B = 0x05;
 1d8:	85 e0       	ldi	r24, 0x05	; 5
 1da:	85 bd       	out	0x25, r24	; 37
 1dc:	08 95       	ret

000001de <startup_sequence>:
}

void startup_sequence() {
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	c2 e0       	ldi	r28, 0x02	; 2
 1e4:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i<2; i++) {
		setOCRA(200);
 1e6:	88 ec       	ldi	r24, 0xC8	; 200
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <setOCRA>
		delay(100);
 1ee:	84 e6       	ldi	r24, 0x64	; 100
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 ae 00 	call	0x15c	; 0x15c <delay>
		setOCRA(150);
 1f6:	86 e9       	ldi	r24, 0x96	; 150
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <setOCRA>
		delay(100);
 1fe:	84 e6       	ldi	r24, 0x64	; 100
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 ae 00 	call	0x15c	; 0x15c <delay>
		setOCRA(50);
 206:	82 e3       	ldi	r24, 0x32	; 50
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <setOCRA>
		delay(200);
 20e:	88 ec       	ldi	r24, 0xC8	; 200
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 ae 00 	call	0x15c	; 0x15c <delay>
		setOCRA(250);
 216:	8a ef       	ldi	r24, 0xFA	; 250
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <setOCRA>
		delay(1000);
 21e:	88 ee       	ldi	r24, 0xE8	; 232
 220:	93 e0       	ldi	r25, 0x03	; 3
 222:	0e 94 ae 00 	call	0x15c	; 0x15c <delay>
		setOCRA(0);
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <setOCRA>
		delay(500);
 22e:	84 ef       	ldi	r24, 0xF4	; 244
 230:	91 e0       	ldi	r25, 0x01	; 1
 232:	0e 94 ae 00 	call	0x15c	; 0x15c <delay>
 236:	21 97       	sbiw	r28, 0x01	; 1
	OCR0A = value;
	TCCR0B = 0x05;
}

void startup_sequence() {
	for (int i = 0; i<2; i++) {
 238:	b1 f6       	brne	.-84     	; 0x1e6 <startup_sequence+0x8>
		delay(1000);
		setOCRA(0);
		delay(500);
	}
	return;
}
 23a:	df 91       	pop	r29
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <main>:

int main() {
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
	
	int state = 0;
	//toggleMotorPower();
	init();
 246:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
	while (power==0) {
 24a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <power>
 24e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <power+0x1>
 252:	89 2b       	or	r24, r25
 254:	d1 f3       	breq	.-12     	; 0x24a <main+0xa>
		//wait
	}
	TCCR0B = 0x05;
 256:	85 e0       	ldi	r24, 0x05	; 5
 258:	85 bd       	out	0x25, r24	; 37
	TCCR0A = 0x83;
 25a:	83 e8       	ldi	r24, 0x83	; 131
 25c:	84 bd       	out	0x24, r24	; 36
	startup_sequence();
 25e:	0e 94 ef 00 	call	0x1de	; 0x1de <startup_sequence>
	initADC();
 262:	0e 94 6e 00 	call	0xdc	; 0xdc <initADC>
 	while (power==1) {
 266:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <power>
 26a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <power+0x1>
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	39 f5       	brne	.+78     	; 0x2c0 <main+0x80>
		 setup_done = 1;
 272:	c1 e0       	ldi	r28, 0x01	; 1
 274:	d0 e0       	ldi	r29, 0x00	; 0
		 //_delay_ms(300);
		 if (power==0) {
			 TCCR0B = 0x00;
			 TCCR0A = 0x83;
 276:	13 e8       	ldi	r17, 0x83	; 131
	TCCR0B = 0x05;
	TCCR0A = 0x83;
	startup_sequence();
	initADC();
 	while (power==1) {
		 setup_done = 1;
 278:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_end+0x1>
 27c:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_end>
		 //_delay_ms(300);
		 if (power==0) {
 280:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <power>
 284:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <power+0x1>
 288:	89 2b       	or	r24, r25
 28a:	19 f4       	brne	.+6      	; 0x292 <main+0x52>
			 TCCR0B = 0x00;
 28c:	15 bc       	out	0x25, r1	; 37
			 TCCR0A = 0x83;
 28e:	14 bd       	out	0x24, r17	; 36
			 PORTD &= ~(1<<6);
 290:	5e 98       	cbi	0x0b, 6	; 11
			 
		 }
		//cli();
		//_delay_ms(100);
		doADC();
 292:	0e 94 7e 00 	call	0xfc	; 0xfc <doADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 296:	2f ef       	ldi	r18, 0xFF	; 255
 298:	87 e8       	ldi	r24, 0x87	; 135
 29a:	93 e1       	ldi	r25, 0x13	; 19
 29c:	21 50       	subi	r18, 0x01	; 1
 29e:	80 40       	sbci	r24, 0x00	; 0
 2a0:	90 40       	sbci	r25, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0x5c>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0x66>
 2a6:	00 00       	nop
		//_delay_ms(100);
		//sei();
		_delay_ms(400); 						// To allow sufficient time between queries (60ms min)
		PORTD |= (1<<4);						// Set trigger high
 2a8:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2aa:	25 e3       	ldi	r18, 0x35	; 53
 2ac:	2a 95       	dec	r18
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <main+0x6c>
 2b0:	00 00       	nop
		_delay_us(10);							// for 10uS
		PORTD &= ~(1<<4);
 2b2:	5c 98       	cbi	0x0b, 4	; 11
	}
	TCCR0B = 0x05;
	TCCR0A = 0x83;
	startup_sequence();
	initADC();
 	while (power==1) {
 2b4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <power>
 2b8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <power+0x1>
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	e1 f2       	breq	.-72     	; 0x278 <main+0x38>
		PORTD |= (1<<4);						// Set trigger high
		_delay_us(10);							// for 10uS
		PORTD &= ~(1<<4);
			
	}
	setup_done = 0;
 2c0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 2c4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
	power = 0;
 2c8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <power+0x1>
 2cc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <power>
	main();
 2d0:	0e 94 20 01 	call	0x240	; 0x240 <main>
	
}
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	08 95       	ret

000002e0 <update_value>:

void update_value(int value) 
{
	TCCR0B = 0;
 2e0:	15 bc       	out	0x25, r1	; 37
	TCNT0 = 0;
 2e2:	16 bc       	out	0x26, r1	; 38
	OCR0A = change_duty_cycle(value);
 2e4:	0e 94 c3 00 	call	0x186	; 0x186 <change_duty_cycle>
 2e8:	87 bd       	out	0x27, r24	; 39
	TCCR0B = 0x05;
 2ea:	85 e0       	ldi	r24, 0x05	; 5
 2ec:	85 bd       	out	0x25, r24	; 37
	TCCR0A = 0x83;
 2ee:	83 e8       	ldi	r24, 0x83	; 131
 2f0:	84 bd       	out	0x24, r24	; 36
 2f2:	08 95       	ret

000002f4 <__vector_2>:
	return;
}

ISR(INT1_vect)
{
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	2f 93       	push	r18
 300:	3f 93       	push	r19
 302:	4f 93       	push	r20
 304:	5f 93       	push	r21
 306:	6f 93       	push	r22
 308:	7f 93       	push	r23
 30a:	8f 93       	push	r24
 30c:	9f 93       	push	r25
 30e:	af 93       	push	r26
 310:	bf 93       	push	r27
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	ef 93       	push	r30
 318:	ff 93       	push	r31
	if(i == 0)
 31a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <i>
 31e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <i+0x1>
 322:	89 2b       	or	r24, r25
 324:	51 f4       	brne	.+20     	; 0x33a <__vector_2+0x46>
	{
		TCCR1B = 2;
 326:	82 e0       	ldi	r24, 0x02	; 2
 328:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		i = 1;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <i+0x1>
 334:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <i>
 338:	23 c0       	rjmp	.+70     	; 0x380 <__vector_2+0x8c>
		//rising = 0;
		//OCR0A = 50;
	}
	else
	{
		TCCR1B = 0;
 33a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		uint16_t pulse = TCNT1;
 33e:	c4 e8       	ldi	r28, 0x84	; 132
 340:	d0 e0       	ldi	r29, 0x00	; 0
 342:	28 81       	ld	r18, Y
 344:	39 81       	ldd	r19, Y+1	; 0x01
		uint8_t trunk_pulse = pulse;
		cm = (pulse/58);
 346:	af e9       	ldi	r26, 0x9F	; 159
 348:	b6 e4       	ldi	r27, 0x46	; 70
 34a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__umulhisi3>
 34e:	92 95       	swap	r25
 350:	82 95       	swap	r24
 352:	8f 70       	andi	r24, 0x0F	; 15
 354:	89 27       	eor	r24, r25
 356:	9f 70       	andi	r25, 0x0F	; 15
 358:	89 27       	eor	r24, r25
 35a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cm>
		//OCR0A = cm;
		//OCR0A = change_duty_cycle(cm)
		update_value(cm);
 35e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <cm>
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 70 01 	call	0x2e0	; 0x2e0 <update_value>
		TCNT1 = 0;
 368:	19 82       	std	Y+1, r1	; 0x01
 36a:	18 82       	st	Y, r1
		i = 0;
 36c:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <i+0x1>
 370:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <i>
		newread = 1;
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <newread+0x1>
 37c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <newread>
		//OCR0A = 255;
	}
}
 380:	ff 91       	pop	r31
 382:	ef 91       	pop	r30
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	bf 91       	pop	r27
 38a:	af 91       	pop	r26
 38c:	9f 91       	pop	r25
 38e:	8f 91       	pop	r24
 390:	7f 91       	pop	r23
 392:	6f 91       	pop	r22
 394:	5f 91       	pop	r21
 396:	4f 91       	pop	r20
 398:	3f 91       	pop	r19
 39a:	2f 91       	pop	r18
 39c:	0f 90       	pop	r0
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	0f 90       	pop	r0
 3a2:	1f 90       	pop	r1
 3a4:	18 95       	reti

000003a6 <__vector_1>:
ISR (INT0_vect) {
 3a6:	1f 92       	push	r1
 3a8:	0f 92       	push	r0
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	0f 92       	push	r0
 3ae:	11 24       	eor	r1, r1
 3b0:	8f 93       	push	r24
 3b2:	9f 93       	push	r25
	if (setup_done==0) {
 3b4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 3b8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 3bc:	89 2b       	or	r24, r25
 3be:	39 f4       	brne	.+14     	; 0x3ce <__vector_1+0x28>
		power = 1;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <power+0x1>
 3c8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <power>
 3cc:	04 c0       	rjmp	.+8      	; 0x3d6 <__vector_1+0x30>
	}
	else {
		power = 0;
 3ce:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <power+0x1>
 3d2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <power>
	}
}
 3d6:	9f 91       	pop	r25
 3d8:	8f 91       	pop	r24
 3da:	0f 90       	pop	r0
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	0f 90       	pop	r0
 3e0:	1f 90       	pop	r1
 3e2:	18 95       	reti

000003e4 <__umulhisi3>:
 3e4:	a2 9f       	mul	r26, r18
 3e6:	b0 01       	movw	r22, r0
 3e8:	b3 9f       	mul	r27, r19
 3ea:	c0 01       	movw	r24, r0
 3ec:	a3 9f       	mul	r26, r19
 3ee:	70 0d       	add	r23, r0
 3f0:	81 1d       	adc	r24, r1
 3f2:	11 24       	eor	r1, r1
 3f4:	91 1d       	adc	r25, r1
 3f6:	b2 9f       	mul	r27, r18
 3f8:	70 0d       	add	r23, r0
 3fa:	81 1d       	adc	r24, r1
 3fc:	11 24       	eor	r1, r1
 3fe:	91 1d       	adc	r25, r1
 400:	08 95       	ret

00000402 <_exit>:
 402:	f8 94       	cli

00000404 <__stop_program>:
 404:	ff cf       	rjmp	.-2      	; 0x404 <__stop_program>
