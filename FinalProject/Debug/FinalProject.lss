
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  0000035e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ab3  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a4  00000000  00000000  00000ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d0  00000000  00000000  00001687  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001b58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000440  00000000  00000000  00001c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003bd  00000000  00000000  000020ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002469  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ee       	ldi	r30, 0xEA	; 234
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  9e:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
	//PRR &= ~(1<<PRTIM1);					// To activate timer1 module
	//TCNT1 = 0;								// Initial timer value
	//TCCR1B |= (1<<CS10);					// Timer without prescaller. Since default clock for atmega328p is 1Mhz period is 1uS
	//TCCR1B |= (1<<ICES1);					// First capture on rising edge

	DDRD |= (1<<6);
  a6:	56 9a       	sbi	0x0a, 6	; 10
	DDRD |= (1<<4);
  a8:	54 9a       	sbi	0x0a, 4	; 10
	DDRD |= (1<<7);
  aa:	57 9a       	sbi	0x0a, 7	; 10
	PORTD |= (1<<3); //enable pull up
  ac:	5b 9a       	sbi	0x0b, 3	; 11
	PORTD |= (1<<2); //enable pull up
  ae:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD |= (1<<7);
  b0:	5f 9a       	sbi	0x0b, 7	; 11
	TCCR0B = 0x05;
  b2:	85 e0       	ldi	r24, 0x05	; 5
  b4:	85 bd       	out	0x25, r24	; 37
	TCCR0A = 0x83;
  b6:	83 e8       	ldi	r24, 0x83	; 131
  b8:	84 bd       	out	0x24, r24	; 36
	OCR0A = 100;
  ba:	84 e6       	ldi	r24, 0x64	; 100
  bc:	87 bd       	out	0x27, r24	; 39
	
	//PCICR = (1<<PCIE1);						// Enable PCINT[14:8] we use pin C5 which is PCINT13
	//PCMSK1 = (1<<PCINT13);
	EIMSK |= (1<<INT1); //enable INT1
  be:	e9 9a       	sbi	0x1d, 1	; 29
	//EIMSK |= (1<<INT0); //enable INT0
	//EICRA |= (1<<ISC11);
	EICRA |= (1<<ISC10); //INT1 any logic change	
  c0:	e9 e6       	ldi	r30, 0x69	; 105
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	80 83       	st	Z, r24
	//EICRA |= (1<<ISC01); //INT0 falling edge trigger				
	sei();									// Enable Global Interrupts
  ca:	78 94       	sei
  cc:	08 95       	ret

000000ce <wait1ms>:
}

void wait1ms(){
	TCNT2 = 0x00;  //reset timer
  ce:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	OCR2A = 0x60;
  d2:	80 e6       	ldi	r24, 0x60	; 96
  d4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	TCCR2A |= (1<<WGM21)|(1<<COM2A1)|(1<<COM2A0); //CTC, compare with OCR1A
  d8:	e0 eb       	ldi	r30, 0xB0	; 176
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	82 6c       	ori	r24, 0xC2	; 194
  e0:	80 83       	st	Z, r24
	TCCR2B |= (1<<CS20)|(1<<CS22); //prescale clock to 1/1024 * 16MHz ~= 16kHz
  e2:	e1 eb       	ldi	r30, 0xB1	; 177
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	85 60       	ori	r24, 0x05	; 5
  ea:	80 83       	st	Z, r24
	while((TIFR2&(1<<OCF2A))==0)
  ec:	b9 9b       	sbis	0x17, 1	; 23
  ee:	fe cf       	rjmp	.-4      	; 0xec <wait1ms+0x1e>
	{}
	TCCR2B = 0; //stop timer
  f0:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	TIFR2 = 1<<OCF2A;
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	87 bb       	out	0x17, r24	; 23
  f8:	08 95       	ret

000000fa <delay>:
}

void delay(int ms){
  fa:	0f 93       	push	r16
  fc:	1f 93       	push	r17
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
	for(int i = 0; i < ms; i++){
 102:	18 16       	cp	r1, r24
 104:	19 06       	cpc	r1, r25
 106:	4c f4       	brge	.+18     	; 0x11a <delay+0x20>
 108:	8c 01       	movw	r16, r24
 10a:	c0 e0       	ldi	r28, 0x00	; 0
 10c:	d0 e0       	ldi	r29, 0x00	; 0
		wait1ms();
 10e:	0e 94 67 00 	call	0xce	; 0xce <wait1ms>
	TCCR2B = 0; //stop timer
	TIFR2 = 1<<OCF2A;
}

void delay(int ms){
	for(int i = 0; i < ms; i++){
 112:	21 96       	adiw	r28, 0x01	; 1
 114:	0c 17       	cp	r16, r28
 116:	1d 07       	cpc	r17, r29
 118:	d1 f7       	brne	.-12     	; 0x10e <delay+0x14>
		wait1ms();
	}
}
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	08 95       	ret

00000124 <change_duty_cycle>:


int change_duty_cycle(int sensor_read) {
	if (sensor_read > 55) {
 124:	88 33       	cpi	r24, 0x38	; 56
 126:	91 05       	cpc	r25, r1
 128:	8c f4       	brge	.+34     	; 0x14c <change_duty_cycle+0x28>
		return 1;
	}
	else if (sensor_read > 45) {
 12a:	8e 32       	cpi	r24, 0x2E	; 46
 12c:	91 05       	cpc	r25, r1
 12e:	8c f4       	brge	.+34     	; 0x152 <change_duty_cycle+0x2e>
		return 70;
	}
	else if (sensor_read > 35) {
 130:	84 32       	cpi	r24, 0x24	; 36
 132:	91 05       	cpc	r25, r1
 134:	8c f4       	brge	.+34     	; 0x158 <change_duty_cycle+0x34>
		return 100;
	}
	else if (sensor_read > 20) {
 136:	85 31       	cpi	r24, 0x15	; 21
 138:	91 05       	cpc	r25, r1
 13a:	8c f4       	brge	.+34     	; 0x15e <change_duty_cycle+0x3a>
		return 130;
	}
	else if (sensor_read > 15) {
 13c:	80 31       	cpi	r24, 0x10	; 16
 13e:	91 05       	cpc	r25, r1
 140:	8c f4       	brge	.+34     	; 0x164 <change_duty_cycle+0x40>
		return 150;
	}
	else if (sensor_read > 5) {
 142:	06 97       	sbiw	r24, 0x06	; 6
 144:	94 f4       	brge	.+36     	; 0x16a <change_duty_cycle+0x46>
		return 200;
	}
	else {
		return 250;
 146:	8a ef       	ldi	r24, 0xFA	; 250
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	08 95       	ret
}


int change_duty_cycle(int sensor_read) {
	if (sensor_read > 55) {
		return 1;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	08 95       	ret
	}
	else if (sensor_read > 45) {
		return 70;
 152:	86 e4       	ldi	r24, 0x46	; 70
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret
	}
	else if (sensor_read > 35) {
		return 100;
 158:	84 e6       	ldi	r24, 0x64	; 100
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	08 95       	ret
	}
	else if (sensor_read > 20) {
		return 130;
 15e:	82 e8       	ldi	r24, 0x82	; 130
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	08 95       	ret
	}
	else if (sensor_read > 15) {
		return 150;
 164:	86 e9       	ldi	r24, 0x96	; 150
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	08 95       	ret
	}
	else if (sensor_read > 5) {
		return 200;
 16a:	88 ec       	ldi	r24, 0xC8	; 200
 16c:	90 e0       	ldi	r25, 0x00	; 0
	}
	else {
		return 250;
	}
}
 16e:	08 95       	ret

00000170 <setOCRA>:

void setOCRA(int value)
{
	TCCR0B = 0;
 170:	15 bc       	out	0x25, r1	; 37
	TCNT0 = 0;
 172:	16 bc       	out	0x26, r1	; 38
	OCR0A = value;
 174:	87 bd       	out	0x27, r24	; 39
	TCCR0B = 0x05;
 176:	85 e0       	ldi	r24, 0x05	; 5
 178:	85 bd       	out	0x25, r24	; 37
 17a:	08 95       	ret

0000017c <startup_sequence>:
}

void startup_sequence() {
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	c2 e0       	ldi	r28, 0x02	; 2
 182:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i<2; i++) {
		setOCRA(200);
 184:	88 ec       	ldi	r24, 0xC8	; 200
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 b8 00 	call	0x170	; 0x170 <setOCRA>
		delay(100);
 18c:	84 e6       	ldi	r24, 0x64	; 100
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 7d 00 	call	0xfa	; 0xfa <delay>
		setOCRA(150);
 194:	86 e9       	ldi	r24, 0x96	; 150
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 b8 00 	call	0x170	; 0x170 <setOCRA>
		delay(100);
 19c:	84 e6       	ldi	r24, 0x64	; 100
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 7d 00 	call	0xfa	; 0xfa <delay>
		setOCRA(50);
 1a4:	82 e3       	ldi	r24, 0x32	; 50
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 b8 00 	call	0x170	; 0x170 <setOCRA>
		delay(200);
 1ac:	88 ec       	ldi	r24, 0xC8	; 200
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 7d 00 	call	0xfa	; 0xfa <delay>
		setOCRA(250);
 1b4:	8a ef       	ldi	r24, 0xFA	; 250
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 b8 00 	call	0x170	; 0x170 <setOCRA>
		delay(1000);
 1bc:	88 ee       	ldi	r24, 0xE8	; 232
 1be:	93 e0       	ldi	r25, 0x03	; 3
 1c0:	0e 94 7d 00 	call	0xfa	; 0xfa <delay>
		setOCRA(0);
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 b8 00 	call	0x170	; 0x170 <setOCRA>
		delay(500);
 1cc:	84 ef       	ldi	r24, 0xF4	; 244
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 7d 00 	call	0xfa	; 0xfa <delay>
 1d4:	21 97       	sbiw	r28, 0x01	; 1
	OCR0A = value;
	TCCR0B = 0x05;
}

void startup_sequence() {
	for (int i = 0; i<2; i++) {
 1d6:	b1 f6       	brne	.-84     	; 0x184 <startup_sequence+0x8>
		setOCRA(250);
		delay(1000);
		setOCRA(0);
		delay(500);
	}
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <main>:

int main() {
	int setup_done = 0;
	int state = 0;
	//toggleMotorPower();
	init();
 1de:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
	startup_sequence();
 1e2:	0e 94 be 00 	call	0x17c	; 0x17c <startup_sequence>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e6:	2f eb       	ldi	r18, 0xBF	; 191
 1e8:	84 ed       	ldi	r24, 0xD4	; 212
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	80 40       	sbci	r24, 0x00	; 0
 1f0:	90 40       	sbci	r25, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0xe>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x18>
 1f6:	00 00       	nop
 	while (1) {
		 
		
		_delay_ms(600); 						// To allow sufficient time between queries (60ms min)
		PORTD |= (1<<4);						// Set trigger high
 1f8:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	23 e0       	ldi	r18, 0x03	; 3
 1fc:	2a 95       	dec	r18
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <main+0x1e>
 200:	00 00       	nop
		_delay_us(10);							// for 10uS
		PORTD &= ~(1<<4);
 202:	5c 98       	cbi	0x0b, 4	; 11
 204:	f0 cf       	rjmp	.-32     	; 0x1e6 <main+0x8>

00000206 <update_value>:
	
}

void update_value(int value) 
{
	TCCR0B = 0;
 206:	15 bc       	out	0x25, r1	; 37
	TCNT0 = 0;
 208:	16 bc       	out	0x26, r1	; 38
	OCR0A = change_duty_cycle(value);
 20a:	0e 94 92 00 	call	0x124	; 0x124 <change_duty_cycle>
 20e:	87 bd       	out	0x27, r24	; 39
	TCCR0B = 0x05;
 210:	85 e0       	ldi	r24, 0x05	; 5
 212:	85 bd       	out	0x25, r24	; 37
 214:	08 95       	ret

00000216 <__vector_2>:
}

ISR(INT1_vect)
{
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	2f 93       	push	r18
 222:	3f 93       	push	r19
 224:	4f 93       	push	r20
 226:	5f 93       	push	r21
 228:	6f 93       	push	r22
 22a:	7f 93       	push	r23
 22c:	8f 93       	push	r24
 22e:	9f 93       	push	r25
 230:	af 93       	push	r26
 232:	bf 93       	push	r27
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	ef 93       	push	r30
 23a:	ff 93       	push	r31
	if(i == 0)
 23c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <i>
 240:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <i+0x1>
 244:	89 2b       	or	r24, r25
 246:	51 f4       	brne	.+20     	; 0x25c <__vector_2+0x46>
	{
		TCCR1B = 2;
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		i = 1;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <i+0x1>
 256:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <i>
 25a:	23 c0       	rjmp	.+70     	; 0x2a2 <__vector_2+0x8c>
		//rising = 0;
		//OCR0A = 50;
	}
	else
	{
		TCCR1B = 0;
 25c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		uint16_t pulse = TCNT1;
 260:	c4 e8       	ldi	r28, 0x84	; 132
 262:	d0 e0       	ldi	r29, 0x00	; 0
 264:	28 81       	ld	r18, Y
 266:	39 81       	ldd	r19, Y+1	; 0x01
		uint8_t trunk_pulse = pulse;
		cm = (pulse/58);
 268:	af e9       	ldi	r26, 0x9F	; 159
 26a:	b6 e4       	ldi	r27, 0x46	; 70
 26c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__umulhisi3>
 270:	92 95       	swap	r25
 272:	82 95       	swap	r24
 274:	8f 70       	andi	r24, 0x0F	; 15
 276:	89 27       	eor	r24, r25
 278:	9f 70       	andi	r25, 0x0F	; 15
 27a:	89 27       	eor	r24, r25
 27c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
		//OCR0A = cm;
		//OCR0A = change_duty_cycle(cm)
		update_value(cm);
 280:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 03 01 	call	0x206	; 0x206 <update_value>
		TCNT1 = 0;
 28a:	19 82       	std	Y+1, r1	; 0x01
 28c:	18 82       	st	Y, r1
		i = 0;
 28e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <i+0x1>
 292:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <i>
		newread = 1;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <newread+0x1>
 29e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <newread>
		//OCR0A = 255;
	}
}
 2a2:	ff 91       	pop	r31
 2a4:	ef 91       	pop	r30
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	bf 91       	pop	r27
 2ac:	af 91       	pop	r26
 2ae:	9f 91       	pop	r25
 2b0:	8f 91       	pop	r24
 2b2:	7f 91       	pop	r23
 2b4:	6f 91       	pop	r22
 2b6:	5f 91       	pop	r21
 2b8:	4f 91       	pop	r20
 2ba:	3f 91       	pop	r19
 2bc:	2f 91       	pop	r18
 2be:	0f 90       	pop	r0
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	0f 90       	pop	r0
 2c4:	1f 90       	pop	r1
 2c6:	18 95       	reti

000002c8 <__umulhisi3>:
 2c8:	a2 9f       	mul	r26, r18
 2ca:	b0 01       	movw	r22, r0
 2cc:	b3 9f       	mul	r27, r19
 2ce:	c0 01       	movw	r24, r0
 2d0:	a3 9f       	mul	r26, r19
 2d2:	70 0d       	add	r23, r0
 2d4:	81 1d       	adc	r24, r1
 2d6:	11 24       	eor	r1, r1
 2d8:	91 1d       	adc	r25, r1
 2da:	b2 9f       	mul	r27, r18
 2dc:	70 0d       	add	r23, r0
 2de:	81 1d       	adc	r24, r1
 2e0:	11 24       	eor	r1, r1
 2e2:	91 1d       	adc	r25, r1
 2e4:	08 95       	ret

000002e6 <_exit>:
 2e6:	f8 94       	cli

000002e8 <__stop_program>:
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <__stop_program>
