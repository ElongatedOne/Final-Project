
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012c  00800100  00000688  0000071c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000688  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080022c  0080022c  00000848  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000878  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c3c  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000081b  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000793  00000000  00000000  00001db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  0000254c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cf  00000000  00000000  00002744  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b5  00000000  00000000  00002c13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000031c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 14 03 	jmp	0x628	; 0x628 <__vector_1>
   8:	0c 94 c1 02 	jmp	0x582	; 0x582 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 32       	cpi	r26, 0x2C	; 44
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ac e2       	ldi	r26, 0x2C	; 44
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 33       	cpi	r26, 0x33	; 51
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 55 02 	call	0x4aa	; 0x4aa <main>
  9e:	0c 94 42 03 	jmp	0x684	; 0x684 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
		return 250-sensor_read;
	}
	else {
		return 1;
	}
}
  a6:	38 9a       	sbi	0x07, 0	; 7
  a8:	39 9a       	sbi	0x07, 1	; 7
  aa:	3a 9a       	sbi	0x07, 2	; 7
  ac:	56 9a       	sbi	0x0a, 6	; 10
  ae:	54 9a       	sbi	0x0a, 4	; 10
  b0:	57 9a       	sbi	0x0a, 7	; 10
  b2:	5b 9a       	sbi	0x0b, 3	; 11
  b4:	5a 9a       	sbi	0x0b, 2	; 11
  b6:	5f 9a       	sbi	0x0b, 7	; 11
  b8:	85 e0       	ldi	r24, 0x05	; 5
  ba:	85 bd       	out	0x25, r24	; 37
  bc:	83 e8       	ldi	r24, 0x83	; 131
  be:	84 bd       	out	0x24, r24	; 36
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	87 bd       	out	0x27, r24	; 39
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 b9       	out	0x04, r24	; 4
  ca:	e9 9a       	sbi	0x1d, 1	; 29
  cc:	e8 9a       	sbi	0x1d, 0	; 29
  ce:	e9 e6       	ldi	r30, 0x69	; 105
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	84 60       	ori	r24, 0x04	; 4
  d6:	80 83       	st	Z, r24
  d8:	80 81       	ld	r24, Z
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	80 83       	st	Z, r24
  de:	78 94       	sei
  e0:	08 95       	ret

000000e2 <USART_init>:
  e2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  e6:	87 e6       	ldi	r24, 0x67	; 103
  e8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  ec:	88 e1       	ldi	r24, 0x18	; 24
  ee:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  f2:	86 e0       	ldi	r24, 0x06	; 6
  f4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  f8:	08 95       	ret

000000fa <waiting_USART>:
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	c4 56       	subi	r28, 0x64	; 100
 104:	d1 09       	sbc	r29, r1
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
 110:	8f e1       	ldi	r24, 0x1F	; 31
 112:	e0 e0       	ldi	r30, 0x00	; 0
 114:	f1 e0       	ldi	r31, 0x01	; 1
 116:	de 01       	movw	r26, r28
 118:	11 96       	adiw	r26, 0x01	; 1
 11a:	01 90       	ld	r0, Z+
 11c:	0d 92       	st	X+, r0
 11e:	8a 95       	dec	r24
 120:	e1 f7       	brne	.-8      	; 0x11a <waiting_USART+0x20>
 122:	fe 01       	movw	r30, r28
 124:	b0 96       	adiw	r30, 0x20	; 32
 126:	85 e4       	ldi	r24, 0x45	; 69
 128:	df 01       	movw	r26, r30
 12a:	1d 92       	st	X+, r1
 12c:	8a 95       	dec	r24
 12e:	e9 f7       	brne	.-6      	; 0x12a <waiting_USART+0x30>
 130:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <i+0x1>
 134:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <i>
 138:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <i>
 13c:	f0 91 32 02 	lds	r31, 0x0232	; 0x800232 <i+0x1>
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	8c 0f       	add	r24, r28
 146:	9d 1f       	adc	r25, r29
 148:	e8 0f       	add	r30, r24
 14a:	f9 1f       	adc	r31, r25
 14c:	80 81       	ld	r24, Z
 14e:	88 23       	and	r24, r24
 150:	51 f1       	breq	.+84     	; 0x1a6 <waiting_USART+0xac>
 152:	e0 ec       	ldi	r30, 0xC0	; 192
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	26 ec       	ldi	r18, 0xC6	; 198
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	80 81       	ld	r24, Z
 15c:	85 ff       	sbrs	r24, 5
 15e:	fd cf       	rjmp	.-6      	; 0x15a <waiting_USART+0x60>
 160:	a0 91 31 02 	lds	r26, 0x0231	; 0x800231 <i>
 164:	b0 91 32 02 	lds	r27, 0x0232	; 0x800232 <i+0x1>
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	8c 0f       	add	r24, r28
 16e:	9d 1f       	adc	r25, r29
 170:	a8 0f       	add	r26, r24
 172:	b9 1f       	adc	r27, r25
 174:	8c 91       	ld	r24, X
 176:	d9 01       	movw	r26, r18
 178:	8c 93       	st	X, r24
 17a:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <i>
 17e:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <i+0x1>
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <i+0x1>
 188:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <i>
 18c:	a0 91 31 02 	lds	r26, 0x0231	; 0x800231 <i>
 190:	b0 91 32 02 	lds	r27, 0x0232	; 0x800232 <i+0x1>
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	8c 0f       	add	r24, r28
 19a:	9d 1f       	adc	r25, r29
 19c:	a8 0f       	add	r26, r24
 19e:	b9 1f       	adc	r27, r25
 1a0:	8c 91       	ld	r24, X
 1a2:	81 11       	cpse	r24, r1
 1a4:	da cf       	rjmp	.-76     	; 0x15a <waiting_USART+0x60>
 1a6:	cc 59       	subi	r28, 0x9C	; 156
 1a8:	df 4f       	sbci	r29, 0xFF	; 255
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <starting_USART>:
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	cd b7       	in	r28, 0x3d	; 61
 1c0:	de b7       	in	r29, 0x3e	; 62
 1c2:	c4 56       	subi	r28, 0x64	; 100
 1c4:	d1 09       	sbc	r29, r1
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	f8 94       	cli
 1ca:	de bf       	out	0x3e, r29	; 62
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	cd bf       	out	0x3d, r28	; 61
 1d0:	82 e1       	ldi	r24, 0x12	; 18
 1d2:	e4 e6       	ldi	r30, 0x64	; 100
 1d4:	f1 e0       	ldi	r31, 0x01	; 1
 1d6:	de 01       	movw	r26, r28
 1d8:	11 96       	adiw	r26, 0x01	; 1
 1da:	01 90       	ld	r0, Z+
 1dc:	0d 92       	st	X+, r0
 1de:	8a 95       	dec	r24
 1e0:	e1 f7       	brne	.-8      	; 0x1da <starting_USART+0x20>
 1e2:	fe 01       	movw	r30, r28
 1e4:	73 96       	adiw	r30, 0x13	; 19
 1e6:	82 e5       	ldi	r24, 0x52	; 82
 1e8:	df 01       	movw	r26, r30
 1ea:	1d 92       	st	X+, r1
 1ec:	8a 95       	dec	r24
 1ee:	e9 f7       	brne	.-6      	; 0x1ea <starting_USART+0x30>
 1f0:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <i+0x1>
 1f4:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <i>
 1f8:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <i>
 1fc:	f0 91 32 02 	lds	r31, 0x0232	; 0x800232 <i+0x1>
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	8c 0f       	add	r24, r28
 206:	9d 1f       	adc	r25, r29
 208:	e8 0f       	add	r30, r24
 20a:	f9 1f       	adc	r31, r25
 20c:	80 81       	ld	r24, Z
 20e:	88 23       	and	r24, r24
 210:	51 f1       	breq	.+84     	; 0x266 <starting_USART+0xac>
 212:	e0 ec       	ldi	r30, 0xC0	; 192
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	26 ec       	ldi	r18, 0xC6	; 198
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	85 ff       	sbrs	r24, 5
 21e:	fd cf       	rjmp	.-6      	; 0x21a <starting_USART+0x60>
 220:	a0 91 31 02 	lds	r26, 0x0231	; 0x800231 <i>
 224:	b0 91 32 02 	lds	r27, 0x0232	; 0x800232 <i+0x1>
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	8c 0f       	add	r24, r28
 22e:	9d 1f       	adc	r25, r29
 230:	a8 0f       	add	r26, r24
 232:	b9 1f       	adc	r27, r25
 234:	8c 91       	ld	r24, X
 236:	d9 01       	movw	r26, r18
 238:	8c 93       	st	X, r24
 23a:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <i>
 23e:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <i+0x1>
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <i+0x1>
 248:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <i>
 24c:	a0 91 31 02 	lds	r26, 0x0231	; 0x800231 <i>
 250:	b0 91 32 02 	lds	r27, 0x0232	; 0x800232 <i+0x1>
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	8c 0f       	add	r24, r28
 25a:	9d 1f       	adc	r25, r29
 25c:	a8 0f       	add	r26, r24
 25e:	b9 1f       	adc	r27, r25
 260:	8c 91       	ld	r24, X
 262:	81 11       	cpse	r24, r1
 264:	da cf       	rjmp	.-76     	; 0x21a <starting_USART+0x60>
 266:	cc 59       	subi	r28, 0x9C	; 156
 268:	df 4f       	sbci	r29, 0xFF	; 255
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	f8 94       	cli
 26e:	de bf       	out	0x3e, r29	; 62
 270:	0f be       	out	0x3f, r0	; 63
 272:	cd bf       	out	0x3d, r28	; 61
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <shutdown_USART>:
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
 282:	c4 56       	subi	r28, 0x64	; 100
 284:	d1 09       	sbc	r29, r1
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
 290:	82 e1       	ldi	r24, 0x12	; 18
 292:	e8 ec       	ldi	r30, 0xC8	; 200
 294:	f1 e0       	ldi	r31, 0x01	; 1
 296:	de 01       	movw	r26, r28
 298:	11 96       	adiw	r26, 0x01	; 1
 29a:	01 90       	ld	r0, Z+
 29c:	0d 92       	st	X+, r0
 29e:	8a 95       	dec	r24
 2a0:	e1 f7       	brne	.-8      	; 0x29a <shutdown_USART+0x20>
 2a2:	fe 01       	movw	r30, r28
 2a4:	73 96       	adiw	r30, 0x13	; 19
 2a6:	82 e5       	ldi	r24, 0x52	; 82
 2a8:	df 01       	movw	r26, r30
 2aa:	1d 92       	st	X+, r1
 2ac:	8a 95       	dec	r24
 2ae:	e9 f7       	brne	.-6      	; 0x2aa <shutdown_USART+0x30>
 2b0:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <i+0x1>
 2b4:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <i>
 2b8:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <i>
 2bc:	f0 91 32 02 	lds	r31, 0x0232	; 0x800232 <i+0x1>
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	8c 0f       	add	r24, r28
 2c6:	9d 1f       	adc	r25, r29
 2c8:	e8 0f       	add	r30, r24
 2ca:	f9 1f       	adc	r31, r25
 2cc:	80 81       	ld	r24, Z
 2ce:	88 23       	and	r24, r24
 2d0:	51 f1       	breq	.+84     	; 0x326 <shutdown_USART+0xac>
 2d2:	e0 ec       	ldi	r30, 0xC0	; 192
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	26 ec       	ldi	r18, 0xC6	; 198
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	85 ff       	sbrs	r24, 5
 2de:	fd cf       	rjmp	.-6      	; 0x2da <shutdown_USART+0x60>
 2e0:	a0 91 31 02 	lds	r26, 0x0231	; 0x800231 <i>
 2e4:	b0 91 32 02 	lds	r27, 0x0232	; 0x800232 <i+0x1>
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	8c 0f       	add	r24, r28
 2ee:	9d 1f       	adc	r25, r29
 2f0:	a8 0f       	add	r26, r24
 2f2:	b9 1f       	adc	r27, r25
 2f4:	8c 91       	ld	r24, X
 2f6:	d9 01       	movw	r26, r18
 2f8:	8c 93       	st	X, r24
 2fa:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <i>
 2fe:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <i+0x1>
 302:	01 96       	adiw	r24, 0x01	; 1
 304:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <i+0x1>
 308:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <i>
 30c:	a0 91 31 02 	lds	r26, 0x0231	; 0x800231 <i>
 310:	b0 91 32 02 	lds	r27, 0x0232	; 0x800232 <i+0x1>
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	8c 0f       	add	r24, r28
 31a:	9d 1f       	adc	r25, r29
 31c:	a8 0f       	add	r26, r24
 31e:	b9 1f       	adc	r27, r25
 320:	8c 91       	ld	r24, X
 322:	81 11       	cpse	r24, r1
 324:	da cf       	rjmp	.-76     	; 0x2da <shutdown_USART+0x60>
 326:	cc 59       	subi	r28, 0x9C	; 156
 328:	df 4f       	sbci	r29, 0xFF	; 255
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <initADC>:
 33a:	ec e7       	ldi	r30, 0x7C	; 124
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	80 64       	ori	r24, 0x40	; 64
 342:	80 83       	st	Z, r24
 344:	ea e7       	ldi	r30, 0x7A	; 122
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	87 60       	ori	r24, 0x07	; 7
 34c:	80 83       	st	Z, r24
 34e:	80 81       	ld	r24, Z
 350:	80 68       	ori	r24, 0x80	; 128
 352:	80 83       	st	Z, r24
 354:	8f ef       	ldi	r24, 0xFF	; 255
 356:	84 b9       	out	0x04, r24	; 4
 358:	08 95       	ret

0000035a <doADC>:
 35a:	ec e7       	ldi	r30, 0x7C	; 124
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	80 7f       	andi	r24, 0xF0	; 240
 362:	80 83       	st	Z, r24
 364:	ea e7       	ldi	r30, 0x7A	; 122
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	80 64       	ori	r24, 0x40	; 64
 36c:	80 83       	st	Z, r24
 36e:	80 81       	ld	r24, Z
 370:	86 fd       	sbrc	r24, 6
 372:	fd cf       	rjmp	.-6      	; 0x36e <doADC+0x14>
 374:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 378:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	92 2b       	or	r25, r18
 380:	06 97       	sbiw	r24, 0x06	; 6
 382:	10 f0       	brcs	.+4      	; 0x388 <doADC+0x2e>
 384:	15 b8       	out	0x05, r1	; 5
 386:	08 95       	ret
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	85 b9       	out	0x05, r24	; 5
 38c:	08 95       	ret

0000038e <wait_1ms>:
 38e:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 392:	80 e6       	ldi	r24, 0x60	; 96
 394:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 398:	e0 eb       	ldi	r30, 0xB0	; 176
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	82 6c       	ori	r24, 0xC2	; 194
 3a0:	80 83       	st	Z, r24
 3a2:	e1 eb       	ldi	r30, 0xB1	; 177
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	85 60       	ori	r24, 0x05	; 5
 3aa:	80 83       	st	Z, r24
 3ac:	b9 9b       	sbis	0x17, 1	; 23
 3ae:	fe cf       	rjmp	.-4      	; 0x3ac <wait_1ms+0x1e>
 3b0:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 3b4:	82 e0       	ldi	r24, 0x02	; 2
 3b6:	87 bb       	out	0x17, r24	; 23
 3b8:	08 95       	ret

000003ba <delay>:
 3ba:	0f 93       	push	r16
 3bc:	1f 93       	push	r17
 3be:	cf 93       	push	r28
 3c0:	df 93       	push	r29
 3c2:	18 16       	cp	r1, r24
 3c4:	19 06       	cpc	r1, r25
 3c6:	4c f4       	brge	.+18     	; 0x3da <delay+0x20>
 3c8:	8c 01       	movw	r16, r24
 3ca:	c0 e0       	ldi	r28, 0x00	; 0
 3cc:	d0 e0       	ldi	r29, 0x00	; 0
 3ce:	0e 94 c7 01 	call	0x38e	; 0x38e <wait_1ms>
 3d2:	21 96       	adiw	r28, 0x01	; 1
 3d4:	0c 17       	cp	r16, r28
 3d6:	1d 07       	cpc	r17, r29
 3d8:	d1 f7       	brne	.-12     	; 0x3ce <delay+0x14>
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	08 95       	ret

000003e4 <change_duty_cycle>:

int change_duty_cycle(int sensor_read) {
	//change the duty cycle based on the distance
	if (sensor_read > 60) {
 3e4:	8d 33       	cpi	r24, 0x3D	; 61
 3e6:	91 05       	cpc	r25, r1
 3e8:	a4 f4       	brge	.+40     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
		return 1;
	}
	else if (sensor_read > 65) {
 3ea:	82 34       	cpi	r24, 0x42	; 66
 3ec:	91 05       	cpc	r25, r1
 3ee:	a4 f4       	brge	.+40     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		return 150;
	}
	else if (sensor_read > 55) {
 3f0:	88 33       	cpi	r24, 0x38	; 56
 3f2:	91 05       	cpc	r25, r1
 3f4:	a4 f4       	brge	.+40     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		return 160;
	}
	else if (sensor_read > 45) {
 3f6:	8e 32       	cpi	r24, 0x2E	; 46
 3f8:	91 05       	cpc	r25, r1
 3fa:	a4 f4       	brge	.+40     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		return 190;
	}
	else if (sensor_read > 30) {
 3fc:	8f 31       	cpi	r24, 0x1F	; 31
 3fe:	91 05       	cpc	r25, r1
 400:	a4 f4       	brge	.+40     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		return 210;
	}
	else if (sensor_read > 25) {
 402:	8a 31       	cpi	r24, 0x1A	; 26
 404:	91 05       	cpc	r25, r1
 406:	a4 f4       	brge	.+40     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		return 230;
	}
	else if (sensor_read > 15) {
 408:	40 97       	sbiw	r24, 0x10	; 16
 40a:	ac f4       	brge	.+42     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
		return 250;
	}
	else {
		return 1;
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	08 95       	ret
}

int change_duty_cycle(int sensor_read) {
	//change the duty cycle based on the distance
	if (sensor_read > 60) {
		return 1;
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	08 95       	ret
	}
	else if (sensor_read > 65) {
		return 150;
 418:	86 e9       	ldi	r24, 0x96	; 150
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	08 95       	ret
	}
	else if (sensor_read > 55) {
		return 160;
 41e:	80 ea       	ldi	r24, 0xA0	; 160
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	08 95       	ret
	}
	else if (sensor_read > 45) {
		return 190;
 424:	8e eb       	ldi	r24, 0xBE	; 190
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	08 95       	ret
	}
	else if (sensor_read > 30) {
		return 210;
 42a:	82 ed       	ldi	r24, 0xD2	; 210
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	08 95       	ret
	}
	else if (sensor_read > 25) {
		return 230;
 430:	86 ee       	ldi	r24, 0xE6	; 230
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	08 95       	ret
	}
	else if (sensor_read > 15) {
		return 250;
 436:	8a ef       	ldi	r24, 0xFA	; 250
 438:	90 e0       	ldi	r25, 0x00	; 0
	}
	else {
		return 1;
	}
}
 43a:	08 95       	ret

0000043c <setOCRA>:

void setOCRA(int value)
{
	TCCR0B = 0;
 43c:	15 bc       	out	0x25, r1	; 37
	TCNT0 = 0;
 43e:	16 bc       	out	0x26, r1	; 38
	OCR0A = value;
 440:	87 bd       	out	0x27, r24	; 39
	TCCR0B = 0x05;
 442:	85 e0       	ldi	r24, 0x05	; 5
 444:	85 bd       	out	0x25, r24	; 37
 446:	08 95       	ret

00000448 <startup_sequence>:
}

void startup_sequence() {
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
 44c:	c2 e0       	ldi	r28, 0x02	; 2
 44e:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i<2; i++) {
		setOCRA(200);
 450:	88 ec       	ldi	r24, 0xC8	; 200
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 1e 02 	call	0x43c	; 0x43c <setOCRA>
		delay(100);
 458:	84 e6       	ldi	r24, 0x64	; 100
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <delay>
		setOCRA(150);
 460:	86 e9       	ldi	r24, 0x96	; 150
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 1e 02 	call	0x43c	; 0x43c <setOCRA>
		delay(100);
 468:	84 e6       	ldi	r24, 0x64	; 100
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <delay>
		setOCRA(50);
 470:	82 e3       	ldi	r24, 0x32	; 50
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 1e 02 	call	0x43c	; 0x43c <setOCRA>
		delay(200);
 478:	88 ec       	ldi	r24, 0xC8	; 200
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <delay>
		setOCRA(250);
 480:	8a ef       	ldi	r24, 0xFA	; 250
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 1e 02 	call	0x43c	; 0x43c <setOCRA>
		delay(1000);
 488:	88 ee       	ldi	r24, 0xE8	; 232
 48a:	93 e0       	ldi	r25, 0x03	; 3
 48c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <delay>
		setOCRA(0);
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 1e 02 	call	0x43c	; 0x43c <setOCRA>
		delay(500);
 498:	84 ef       	ldi	r24, 0xF4	; 244
 49a:	91 e0       	ldi	r25, 0x01	; 1
 49c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <delay>
 4a0:	21 97       	sbiw	r28, 0x01	; 1
	OCR0A = value;
	TCCR0B = 0x05;
}

void startup_sequence() {
	for (int i = 0; i<2; i++) {
 4a2:	b1 f6       	brne	.-84     	; 0x450 <startup_sequence+0x8>
		delay(1000);
		setOCRA(0);
		delay(500);
	}
	return;
}
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	08 95       	ret

000004aa <main>:

int main() {
 4aa:	1f 93       	push	r17
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
	
	init();
 4b0:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
	USART_init();
 4b4:	0e 94 71 00 	call	0xe2	; 0xe2 <USART_init>
	while (power==0) {
 4b8:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <power>
 4bc:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <power+0x1>
 4c0:	89 2b       	or	r24, r25
 4c2:	61 f4       	brne	.+24     	; 0x4dc <main+0x32>
		waiting_USART();
 4c4:	0e 94 7d 00 	call	0xfa	; 0xfa <waiting_USART>
		delay(200);
 4c8:	88 ec       	ldi	r24, 0xC8	; 200
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 dd 01 	call	0x3ba	; 0x3ba <delay>

int main() {
	
	init();
	USART_init();
	while (power==0) {
 4d0:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <power>
 4d4:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <power+0x1>
 4d8:	89 2b       	or	r24, r25
 4da:	a1 f3       	breq	.-24     	; 0x4c4 <main+0x1a>
		waiting_USART();
		delay(200);
	}
	TCCR0B = 0x05;
 4dc:	85 e0       	ldi	r24, 0x05	; 5
 4de:	85 bd       	out	0x25, r24	; 37
	TCCR0A = 0x83;
 4e0:	83 e8       	ldi	r24, 0x83	; 131
 4e2:	84 bd       	out	0x24, r24	; 36
	startup_sequence();
 4e4:	0e 94 24 02 	call	0x448	; 0x448 <startup_sequence>
	initADC();
 4e8:	0e 94 9d 01 	call	0x33a	; 0x33a <initADC>
	starting_USART();
 4ec:	0e 94 dd 00 	call	0x1ba	; 0x1ba <starting_USART>
 	while (power==1) {
 4f0:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <power>
 4f4:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <power+0x1>
 4f8:	01 97       	sbiw	r24, 0x01	; 1
 4fa:	39 f5       	brne	.+78     	; 0x54a <main+0xa0>
		 setup_done = 1;
 4fc:	c1 e0       	ldi	r28, 0x01	; 1
 4fe:	d0 e0       	ldi	r29, 0x00	; 0
		 if (power==0) {
			 TCCR0B = 0x00;
			 TCCR0A = 0x83;
 500:	13 e8       	ldi	r17, 0x83	; 131
	TCCR0A = 0x83;
	startup_sequence();
	initADC();
	starting_USART();
 	while (power==1) {
		 setup_done = 1;
 502:	d0 93 2d 02 	sts	0x022D, r29	; 0x80022d <__data_end+0x1>
 506:	c0 93 2c 02 	sts	0x022C, r28	; 0x80022c <__data_end>
		 if (power==0) {
 50a:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <power>
 50e:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <power+0x1>
 512:	89 2b       	or	r24, r25
 514:	19 f4       	brne	.+6      	; 0x51c <main+0x72>
			 TCCR0B = 0x00;
 516:	15 bc       	out	0x25, r1	; 37
			 TCCR0A = 0x83;
 518:	14 bd       	out	0x24, r17	; 36
			 PORTD &= ~(1<<6);
 51a:	5e 98       	cbi	0x0b, 6	; 11
			 
		 }
		
		doADC();
 51c:	0e 94 ad 01 	call	0x35a	; 0x35a <doADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 520:	2f ef       	ldi	r18, 0xFF	; 255
 522:	83 ec       	ldi	r24, 0xC3	; 195
 524:	99 e0       	ldi	r25, 0x09	; 9
 526:	21 50       	subi	r18, 0x01	; 1
 528:	80 40       	sbci	r24, 0x00	; 0
 52a:	90 40       	sbci	r25, 0x00	; 0
 52c:	e1 f7       	brne	.-8      	; 0x526 <main+0x7c>
 52e:	00 c0       	rjmp	.+0      	; 0x530 <main+0x86>
 530:	00 00       	nop
		
		_delay_ms(200); 						// To allow sufficient time between queries (60ms min)
		PORTD |= (1<<4);						// Set trigger high
 532:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 534:	25 e3       	ldi	r18, 0x35	; 53
 536:	2a 95       	dec	r18
 538:	f1 f7       	brne	.-4      	; 0x536 <main+0x8c>
 53a:	00 00       	nop
		_delay_us(10);							// for 10uS
		PORTD &= ~(1<<4);
 53c:	5c 98       	cbi	0x0b, 4	; 11
	TCCR0B = 0x05;
	TCCR0A = 0x83;
	startup_sequence();
	initADC();
	starting_USART();
 	while (power==1) {
 53e:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <power>
 542:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <power+0x1>
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	e1 f2       	breq	.-72     	; 0x502 <main+0x58>
		PORTD |= (1<<4);						// Set trigger high
		_delay_us(10);							// for 10uS
		PORTD &= ~(1<<4);
			
	}
	shutdown_USART();
 54a:	0e 94 3d 01 	call	0x27a	; 0x27a <shutdown_USART>
	setup_done = 0;
 54e:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <__data_end+0x1>
 552:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <__data_end>
	power = 0;
 556:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <power+0x1>
 55a:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <power>
	main();
 55e:	0e 94 55 02 	call	0x4aa	; 0x4aa <main>
	
}
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	1f 91       	pop	r17
 56c:	08 95       	ret

0000056e <update_value>:

void update_value(int value) 
{
	TCCR0B = 0;
 56e:	15 bc       	out	0x25, r1	; 37
	TCNT0 = 0;
 570:	16 bc       	out	0x26, r1	; 38
	OCR0A = change_duty_cycle(value);
 572:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <change_duty_cycle>
 576:	87 bd       	out	0x27, r24	; 39
	//OCR0A = alternative_duty_change(value);
	TCCR0B = 0x05;
 578:	85 e0       	ldi	r24, 0x05	; 5
 57a:	85 bd       	out	0x25, r24	; 37
	TCCR0A = 0x83;
 57c:	83 e8       	ldi	r24, 0x83	; 131
 57e:	84 bd       	out	0x24, r24	; 36
 580:	08 95       	ret

00000582 <__vector_2>:
	return;
}

ISR(INT1_vect)
{
 582:	1f 92       	push	r1
 584:	0f 92       	push	r0
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	0f 92       	push	r0
 58a:	11 24       	eor	r1, r1
 58c:	2f 93       	push	r18
 58e:	3f 93       	push	r19
 590:	4f 93       	push	r20
 592:	5f 93       	push	r21
 594:	6f 93       	push	r22
 596:	7f 93       	push	r23
 598:	8f 93       	push	r24
 59a:	9f 93       	push	r25
 59c:	af 93       	push	r26
 59e:	bf 93       	push	r27
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	ef 93       	push	r30
 5a6:	ff 93       	push	r31
	if(i == 0)
 5a8:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <i>
 5ac:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <i+0x1>
 5b0:	89 2b       	or	r24, r25
 5b2:	51 f4       	brne	.+20     	; 0x5c8 <__vector_2+0x46>
	{
		TCCR1B = 2;
 5b4:	82 e0       	ldi	r24, 0x02	; 2
 5b6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		i = 1;
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <i+0x1>
 5c2:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <i>
 5c6:	1d c0       	rjmp	.+58     	; 0x602 <__vector_2+0x80>
		
	}
	else
	{
		TCCR1B = 0;
 5c8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		uint16_t pulse = TCNT1;
 5cc:	c4 e8       	ldi	r28, 0x84	; 132
 5ce:	d0 e0       	ldi	r29, 0x00	; 0
 5d0:	28 81       	ld	r18, Y
 5d2:	39 81       	ldd	r19, Y+1	; 0x01
		cm = (pulse/58);
 5d4:	af e9       	ldi	r26, 0x9F	; 159
 5d6:	b6 e4       	ldi	r27, 0x46	; 70
 5d8:	0e 94 33 03 	call	0x666	; 0x666 <__umulhisi3>
 5dc:	92 95       	swap	r25
 5de:	82 95       	swap	r24
 5e0:	8f 70       	andi	r24, 0x0F	; 15
 5e2:	89 27       	eor	r24, r25
 5e4:	9f 70       	andi	r25, 0x0F	; 15
 5e6:	89 27       	eor	r24, r25
 5e8:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <cm>
		update_value(cm);
 5ec:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <cm>
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	0e 94 b7 02 	call	0x56e	; 0x56e <update_value>
		TCNT1 = 0;
 5f6:	19 82       	std	Y+1, r1	; 0x01
 5f8:	18 82       	st	Y, r1
		i = 0;
 5fa:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <i+0x1>
 5fe:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <i>
		
	}
}
 602:	ff 91       	pop	r31
 604:	ef 91       	pop	r30
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	bf 91       	pop	r27
 60c:	af 91       	pop	r26
 60e:	9f 91       	pop	r25
 610:	8f 91       	pop	r24
 612:	7f 91       	pop	r23
 614:	6f 91       	pop	r22
 616:	5f 91       	pop	r21
 618:	4f 91       	pop	r20
 61a:	3f 91       	pop	r19
 61c:	2f 91       	pop	r18
 61e:	0f 90       	pop	r0
 620:	0f be       	out	0x3f, r0	; 63
 622:	0f 90       	pop	r0
 624:	1f 90       	pop	r1
 626:	18 95       	reti

00000628 <__vector_1>:
ISR (INT0_vect) {
 628:	1f 92       	push	r1
 62a:	0f 92       	push	r0
 62c:	0f b6       	in	r0, 0x3f	; 63
 62e:	0f 92       	push	r0
 630:	11 24       	eor	r1, r1
 632:	8f 93       	push	r24
 634:	9f 93       	push	r25
	if (setup_done==0) {
 636:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <__data_end>
 63a:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <__data_end+0x1>
 63e:	89 2b       	or	r24, r25
 640:	39 f4       	brne	.+14     	; 0x650 <__vector_1+0x28>
		power = 1;
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <power+0x1>
 64a:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <power>
 64e:	04 c0       	rjmp	.+8      	; 0x658 <__vector_1+0x30>
	}
	else {
		power = 0;
 650:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <power+0x1>
 654:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <power>
	}
	
}
 658:	9f 91       	pop	r25
 65a:	8f 91       	pop	r24
 65c:	0f 90       	pop	r0
 65e:	0f be       	out	0x3f, r0	; 63
 660:	0f 90       	pop	r0
 662:	1f 90       	pop	r1
 664:	18 95       	reti

00000666 <__umulhisi3>:
 666:	a2 9f       	mul	r26, r18
 668:	b0 01       	movw	r22, r0
 66a:	b3 9f       	mul	r27, r19
 66c:	c0 01       	movw	r24, r0
 66e:	a3 9f       	mul	r26, r19
 670:	70 0d       	add	r23, r0
 672:	81 1d       	adc	r24, r1
 674:	11 24       	eor	r1, r1
 676:	91 1d       	adc	r25, r1
 678:	b2 9f       	mul	r27, r18
 67a:	70 0d       	add	r23, r0
 67c:	81 1d       	adc	r24, r1
 67e:	11 24       	eor	r1, r1
 680:	91 1d       	adc	r25, r1
 682:	08 95       	ret

00000684 <_exit>:
 684:	f8 94       	cli

00000686 <__stop_program>:
 686:	ff cf       	rjmp	.-2      	; 0x686 <__stop_program>
