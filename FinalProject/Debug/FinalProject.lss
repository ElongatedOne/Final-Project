
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  000003d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000add  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b3  00000000  00000000  00000f91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055e  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00001ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000457  00000000  00000000  00001dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000041f  00000000  00000000  00002243  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002662  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <__vector_1>
   8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <main>
  9e:	0c 94 ad 01 	jmp	0x35a	; 0x35a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
}

void toggleLight() {
	PORTB ^= (1<<0);
	PORTB ^= (1<<1);
	PORTB ^= (1<<2);
  a6:	38 9a       	sbi	0x07, 0	; 7
  a8:	39 9a       	sbi	0x07, 1	; 7
  aa:	3a 9a       	sbi	0x07, 2	; 7
  ac:	56 9a       	sbi	0x0a, 6	; 10
  ae:	54 9a       	sbi	0x0a, 4	; 10
  b0:	57 9a       	sbi	0x0a, 7	; 10
  b2:	5b 9a       	sbi	0x0b, 3	; 11
  b4:	5a 9a       	sbi	0x0b, 2	; 11
  b6:	5f 9a       	sbi	0x0b, 7	; 11
  b8:	15 bc       	out	0x25, r1	; 37
  ba:	14 bc       	out	0x24, r1	; 36
  bc:	17 bc       	out	0x27, r1	; 39
  be:	e9 9a       	sbi	0x1d, 1	; 29
  c0:	e8 9a       	sbi	0x1d, 0	; 29
  c2:	e9 e6       	ldi	r30, 0x69	; 105
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	84 60       	ori	r24, 0x04	; 4
  ca:	80 83       	st	Z, r24
  cc:	80 81       	ld	r24, Z
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	80 83       	st	Z, r24
  d2:	78 94       	sei
  d4:	08 95       	ret

000000d6 <wait1ms>:
  d6:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
  da:	80 e6       	ldi	r24, 0x60	; 96
  dc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
  e0:	e0 eb       	ldi	r30, 0xB0	; 176
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	82 6c       	ori	r24, 0xC2	; 194
  e8:	80 83       	st	Z, r24
  ea:	e1 eb       	ldi	r30, 0xB1	; 177
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	85 60       	ori	r24, 0x05	; 5
  f2:	80 83       	st	Z, r24
  f4:	b9 9b       	sbis	0x17, 1	; 23
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <wait1ms+0x1e>
  f8:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	87 bb       	out	0x17, r24	; 23
 100:	08 95       	ret

00000102 <delay>:
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	18 16       	cp	r1, r24
 10c:	19 06       	cpc	r1, r25
 10e:	4c f4       	brge	.+18     	; 0x122 <delay+0x20>
 110:	8c 01       	movw	r16, r24
 112:	c0 e0       	ldi	r28, 0x00	; 0
 114:	d0 e0       	ldi	r29, 0x00	; 0
 116:	0e 94 6b 00 	call	0xd6	; 0xd6 <wait1ms>
 11a:	21 96       	adiw	r28, 0x01	; 1
 11c:	0c 17       	cp	r16, r28
 11e:	1d 07       	cpc	r17, r29
 120:	d1 f7       	brne	.-12     	; 0x116 <delay+0x14>
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	1f 91       	pop	r17
 128:	0f 91       	pop	r16
 12a:	08 95       	ret

0000012c <change_duty_cycle>:
	return;
}

int change_duty_cycle(int sensor_read) {
	if (sensor_read > 55) {
 12c:	88 33       	cpi	r24, 0x38	; 56
 12e:	91 05       	cpc	r25, r1
 130:	8c f4       	brge	.+34     	; 0x154 <change_duty_cycle+0x28>
		return 1;
	}
	else if (sensor_read > 45) {
 132:	8e 32       	cpi	r24, 0x2E	; 46
 134:	91 05       	cpc	r25, r1
 136:	8c f4       	brge	.+34     	; 0x15a <change_duty_cycle+0x2e>
		return 70;
	}
	else if (sensor_read > 35) {
 138:	84 32       	cpi	r24, 0x24	; 36
 13a:	91 05       	cpc	r25, r1
 13c:	8c f4       	brge	.+34     	; 0x160 <change_duty_cycle+0x34>
		return 100;
	}
	else if (sensor_read > 20) {
 13e:	85 31       	cpi	r24, 0x15	; 21
 140:	91 05       	cpc	r25, r1
 142:	8c f4       	brge	.+34     	; 0x166 <change_duty_cycle+0x3a>
		return 130;
	}
	else if (sensor_read > 15) {
 144:	80 31       	cpi	r24, 0x10	; 16
 146:	91 05       	cpc	r25, r1
 148:	8c f4       	brge	.+34     	; 0x16c <change_duty_cycle+0x40>
		return 150;
	}
	else if (sensor_read > 5) {
 14a:	06 97       	sbiw	r24, 0x06	; 6
 14c:	94 f4       	brge	.+36     	; 0x172 <change_duty_cycle+0x46>
		return 200;
	}
	else {
		return 250;
 14e:	8a ef       	ldi	r24, 0xFA	; 250
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	08 95       	ret
	return;
}

int change_duty_cycle(int sensor_read) {
	if (sensor_read > 55) {
		return 1;
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	08 95       	ret
	}
	else if (sensor_read > 45) {
		return 70;
 15a:	86 e4       	ldi	r24, 0x46	; 70
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	08 95       	ret
	}
	else if (sensor_read > 35) {
		return 100;
 160:	84 e6       	ldi	r24, 0x64	; 100
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	08 95       	ret
	}
	else if (sensor_read > 20) {
		return 130;
 166:	82 e8       	ldi	r24, 0x82	; 130
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	08 95       	ret
	}
	else if (sensor_read > 15) {
		return 150;
 16c:	86 e9       	ldi	r24, 0x96	; 150
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	08 95       	ret
	}
	else if (sensor_read > 5) {
		return 200;
 172:	88 ec       	ldi	r24, 0xC8	; 200
 174:	90 e0       	ldi	r25, 0x00	; 0
	}
	else {
		return 250;
	}
}
 176:	08 95       	ret

00000178 <setOCRA>:

void setOCRA(int value)
{
	TCCR0B = 0;
 178:	15 bc       	out	0x25, r1	; 37
	TCNT0 = 0;
 17a:	16 bc       	out	0x26, r1	; 38
	OCR0A = value;
 17c:	87 bd       	out	0x27, r24	; 39
	TCCR0B = 0x05;
 17e:	85 e0       	ldi	r24, 0x05	; 5
 180:	85 bd       	out	0x25, r24	; 37
 182:	08 95       	ret

00000184 <startup_sequence>:
}

void startup_sequence() {
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	c2 e0       	ldi	r28, 0x02	; 2
 18a:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i<2; i++) {
		setOCRA(200);
 18c:	88 ec       	ldi	r24, 0xC8	; 200
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 bc 00 	call	0x178	; 0x178 <setOCRA>
		delay(100);
 194:	84 e6       	ldi	r24, 0x64	; 100
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	0e 94 81 00 	call	0x102	; 0x102 <delay>
		setOCRA(150);
 19c:	86 e9       	ldi	r24, 0x96	; 150
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 bc 00 	call	0x178	; 0x178 <setOCRA>
		delay(100);
 1a4:	84 e6       	ldi	r24, 0x64	; 100
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 81 00 	call	0x102	; 0x102 <delay>
		setOCRA(50);
 1ac:	82 e3       	ldi	r24, 0x32	; 50
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 bc 00 	call	0x178	; 0x178 <setOCRA>
		delay(200);
 1b4:	88 ec       	ldi	r24, 0xC8	; 200
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 81 00 	call	0x102	; 0x102 <delay>
		setOCRA(250);
 1bc:	8a ef       	ldi	r24, 0xFA	; 250
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 bc 00 	call	0x178	; 0x178 <setOCRA>
		delay(1000);
 1c4:	88 ee       	ldi	r24, 0xE8	; 232
 1c6:	93 e0       	ldi	r25, 0x03	; 3
 1c8:	0e 94 81 00 	call	0x102	; 0x102 <delay>
		setOCRA(0);
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 bc 00 	call	0x178	; 0x178 <setOCRA>
		delay(500);
 1d4:	84 ef       	ldi	r24, 0xF4	; 244
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 81 00 	call	0x102	; 0x102 <delay>
 1dc:	21 97       	sbiw	r28, 0x01	; 1
	OCR0A = value;
	TCCR0B = 0x05;
}

void startup_sequence() {
	for (int i = 0; i<2; i++) {
 1de:	b1 f6       	brne	.-84     	; 0x18c <startup_sequence+0x8>
		delay(1000);
		setOCRA(0);
		delay(500);
	}
	return;
}
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	08 95       	ret

000001e6 <main>:

int main() {
	int setup_done = 0;
	int state = 0;
	//toggleMotorPower();
	init();
 1e6:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
	while (power==0) {
 1ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 1ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 1f2:	89 2b       	or	r24, r25
 1f4:	d1 f3       	breq	.-12     	; 0x1ea <main+0x4>
		//wait
	}
	TCCR0B = 0x05;
 1f6:	85 e0       	ldi	r24, 0x05	; 5
 1f8:	85 bd       	out	0x25, r24	; 37
	TCCR0A = 0x83;
 1fa:	83 e8       	ldi	r24, 0x83	; 131
 1fc:	84 bd       	out	0x24, r24	; 36
	startup_sequence();
 1fe:	0e 94 c2 00 	call	0x184	; 0x184 <startup_sequence>
 	while (1) {
		 if (power==0) {
			 TCCR0B = 0x00;
			 TCCR0A = 0x83;
 202:	23 e8       	ldi	r18, 0x83	; 131
	}
	TCCR0B = 0x05;
	TCCR0A = 0x83;
	startup_sequence();
 	while (1) {
		 if (power==0) {
 204:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 208:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 20c:	89 2b       	or	r24, r25
 20e:	21 f4       	brne	.+8      	; 0x218 <main+0x32>
			 TCCR0B = 0x00;
 210:	15 bc       	out	0x25, r1	; 37
			 TCCR0A = 0x83;
 212:	24 bd       	out	0x24, r18	; 36
			 PORTD &= ~(0<<6);
 214:	8b b1       	in	r24, 0x0b	; 11
 216:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	3f ef       	ldi	r19, 0xFF	; 255
 21a:	87 e8       	ldi	r24, 0x87	; 135
 21c:	93 e1       	ldi	r25, 0x13	; 19
 21e:	31 50       	subi	r19, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <main+0x38>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0x42>
 228:	00 00       	nop
			 
		 }
		
		_delay_ms(400); 						// To allow sufficient time between queries (60ms min)
		PORTD |= (1<<4);						// Set trigger high
 22a:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	35 e3       	ldi	r19, 0x35	; 53
 22e:	3a 95       	dec	r19
 230:	f1 f7       	brne	.-4      	; 0x22e <main+0x48>
 232:	00 00       	nop
		_delay_us(10);							// for 10uS
		PORTD &= ~(1<<4);
 234:	5c 98       	cbi	0x0b, 4	; 11
			
	}
 236:	e6 cf       	rjmp	.-52     	; 0x204 <main+0x1e>

00000238 <update_value>:
	
}

void update_value(int value) 
{
	TCCR0B = 0;
 238:	15 bc       	out	0x25, r1	; 37
	TCNT0 = 0;
 23a:	16 bc       	out	0x26, r1	; 38
	OCR0A = change_duty_cycle(value);
 23c:	0e 94 96 00 	call	0x12c	; 0x12c <change_duty_cycle>
 240:	87 bd       	out	0x27, r24	; 39
	TCCR0B = 0x05;
 242:	85 e0       	ldi	r24, 0x05	; 5
 244:	85 bd       	out	0x25, r24	; 37
	TCCR0A = 0x83;
 246:	83 e8       	ldi	r24, 0x83	; 131
 248:	84 bd       	out	0x24, r24	; 36
 24a:	08 95       	ret

0000024c <__vector_2>:
	return;
}

ISR(INT1_vect)
{
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	2f 93       	push	r18
 258:	3f 93       	push	r19
 25a:	4f 93       	push	r20
 25c:	5f 93       	push	r21
 25e:	6f 93       	push	r22
 260:	7f 93       	push	r23
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ef 93       	push	r30
 270:	ff 93       	push	r31
	if(i == 0)
 272:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <i>
 276:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <i+0x1>
 27a:	89 2b       	or	r24, r25
 27c:	51 f4       	brne	.+20     	; 0x292 <__vector_2+0x46>
	{
		TCCR1B = 2;
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		i = 1;
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <i+0x1>
 28c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <i>
 290:	23 c0       	rjmp	.+70     	; 0x2d8 <__vector_2+0x8c>
		//rising = 0;
		//OCR0A = 50;
	}
	else
	{
		TCCR1B = 0;
 292:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		uint16_t pulse = TCNT1;
 296:	c4 e8       	ldi	r28, 0x84	; 132
 298:	d0 e0       	ldi	r29, 0x00	; 0
 29a:	28 81       	ld	r18, Y
 29c:	39 81       	ldd	r19, Y+1	; 0x01
		uint8_t trunk_pulse = pulse;
		cm = (pulse/58);
 29e:	af e9       	ldi	r26, 0x9F	; 159
 2a0:	b6 e4       	ldi	r27, 0x46	; 70
 2a2:	0e 94 9e 01 	call	0x33c	; 0x33c <__umulhisi3>
 2a6:	92 95       	swap	r25
 2a8:	82 95       	swap	r24
 2aa:	8f 70       	andi	r24, 0x0F	; 15
 2ac:	89 27       	eor	r24, r25
 2ae:	9f 70       	andi	r25, 0x0F	; 15
 2b0:	89 27       	eor	r24, r25
 2b2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <cm>
		//OCR0A = cm;
		//OCR0A = change_duty_cycle(cm)
		update_value(cm);
 2b6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <cm>
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 1c 01 	call	0x238	; 0x238 <update_value>
		TCNT1 = 0;
 2c0:	19 82       	std	Y+1, r1	; 0x01
 2c2:	18 82       	st	Y, r1
		i = 0;
 2c4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <i+0x1>
 2c8:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <i>
		newread = 1;
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <newread+0x1>
 2d4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <newread>
		//OCR0A = 255;
	}
}
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	bf 91       	pop	r27
 2e2:	af 91       	pop	r26
 2e4:	9f 91       	pop	r25
 2e6:	8f 91       	pop	r24
 2e8:	7f 91       	pop	r23
 2ea:	6f 91       	pop	r22
 2ec:	5f 91       	pop	r21
 2ee:	4f 91       	pop	r20
 2f0:	3f 91       	pop	r19
 2f2:	2f 91       	pop	r18
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <__vector_1>:
ISR (INT0_vect) {
 2fe:	1f 92       	push	r1
 300:	0f 92       	push	r0
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	0f 92       	push	r0
 306:	11 24       	eor	r1, r1
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
	power = (power+1)%2;
 30c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 310:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	81 70       	andi	r24, 0x01	; 1
 318:	90 78       	andi	r25, 0x80	; 128
 31a:	99 23       	and	r25, r25
 31c:	24 f4       	brge	.+8      	; 0x326 <__vector_1+0x28>
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	8e 6f       	ori	r24, 0xFE	; 254
 322:	9f 6f       	ori	r25, 0xFF	; 255
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 32a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
}
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	0f 90       	pop	r0
 334:	0f be       	out	0x3f, r0	; 63
 336:	0f 90       	pop	r0
 338:	1f 90       	pop	r1
 33a:	18 95       	reti

0000033c <__umulhisi3>:
 33c:	a2 9f       	mul	r26, r18
 33e:	b0 01       	movw	r22, r0
 340:	b3 9f       	mul	r27, r19
 342:	c0 01       	movw	r24, r0
 344:	a3 9f       	mul	r26, r19
 346:	70 0d       	add	r23, r0
 348:	81 1d       	adc	r24, r1
 34a:	11 24       	eor	r1, r1
 34c:	91 1d       	adc	r25, r1
 34e:	b2 9f       	mul	r27, r18
 350:	70 0d       	add	r23, r0
 352:	81 1d       	adc	r24, r1
 354:	11 24       	eor	r1, r1
 356:	91 1d       	adc	r25, r1
 358:	08 95       	ret

0000035a <_exit>:
 35a:	f8 94       	cli

0000035c <__stop_program>:
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__stop_program>
