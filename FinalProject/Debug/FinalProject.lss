
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000040c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  00000480  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b57  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c8  00000000  00000000  000010cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000641  00000000  00000000  00001897  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00001ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048d  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004dd  00000000  00000000  000024ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000029ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__vector_1>
   8:	0c 94 83 01 	jmp	0x306	; 0x306 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 29 01 	call	0x252	; 0x252 <main>
  9e:	0c 94 04 02 	jmp	0x408	; 0x408 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init>:
		return 250-sensor_read;
	}
	else {
		return 1;
	}
}
  a6:	38 9a       	sbi	0x07, 0	; 7
  a8:	39 9a       	sbi	0x07, 1	; 7
  aa:	3a 9a       	sbi	0x07, 2	; 7
  ac:	56 9a       	sbi	0x0a, 6	; 10
  ae:	54 9a       	sbi	0x0a, 4	; 10
  b0:	57 9a       	sbi	0x0a, 7	; 10
  b2:	5b 9a       	sbi	0x0b, 3	; 11
  b4:	5a 9a       	sbi	0x0b, 2	; 11
  b6:	5f 9a       	sbi	0x0b, 7	; 11
  b8:	85 e0       	ldi	r24, 0x05	; 5
  ba:	85 bd       	out	0x25, r24	; 37
  bc:	83 e8       	ldi	r24, 0x83	; 131
  be:	84 bd       	out	0x24, r24	; 36
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	87 bd       	out	0x27, r24	; 39
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 b9       	out	0x04, r24	; 4
  ca:	e9 9a       	sbi	0x1d, 1	; 29
  cc:	e8 9a       	sbi	0x1d, 0	; 29
  ce:	e9 e6       	ldi	r30, 0x69	; 105
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	84 60       	ori	r24, 0x04	; 4
  d6:	80 83       	st	Z, r24
  d8:	80 81       	ld	r24, Z
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	80 83       	st	Z, r24
  de:	78 94       	sei
  e0:	08 95       	ret

000000e2 <initADC>:
  e2:	ec e7       	ldi	r30, 0x7C	; 124
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	80 64       	ori	r24, 0x40	; 64
  ea:	80 83       	st	Z, r24
  ec:	ea e7       	ldi	r30, 0x7A	; 122
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	87 60       	ori	r24, 0x07	; 7
  f4:	80 83       	st	Z, r24
  f6:	80 81       	ld	r24, Z
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	80 83       	st	Z, r24
  fc:	8f ef       	ldi	r24, 0xFF	; 255
  fe:	84 b9       	out	0x04, r24	; 4
 100:	08 95       	ret

00000102 <doADC>:
 102:	ec e7       	ldi	r30, 0x7C	; 124
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	80 7f       	andi	r24, 0xF0	; 240
 10a:	80 83       	st	Z, r24
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 64       	ori	r24, 0x40	; 64
 114:	80 83       	st	Z, r24
 116:	80 81       	ld	r24, Z
 118:	86 fd       	sbrc	r24, 6
 11a:	fd cf       	rjmp	.-6      	; 0x116 <doADC+0x14>
 11c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 120:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	92 2b       	or	r25, r18
 128:	06 97       	sbiw	r24, 0x06	; 6
 12a:	10 f0       	brcs	.+4      	; 0x130 <doADC+0x2e>
 12c:	15 b8       	out	0x05, r1	; 5
 12e:	08 95       	ret
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	85 b9       	out	0x05, r24	; 5
 134:	08 95       	ret

00000136 <wait_1ms>:
 136:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 13a:	80 e6       	ldi	r24, 0x60	; 96
 13c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 140:	e0 eb       	ldi	r30, 0xB0	; 176
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	82 6c       	ori	r24, 0xC2	; 194
 148:	80 83       	st	Z, r24
 14a:	e1 eb       	ldi	r30, 0xB1	; 177
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	85 60       	ori	r24, 0x05	; 5
 152:	80 83       	st	Z, r24
 154:	b9 9b       	sbis	0x17, 1	; 23
 156:	fe cf       	rjmp	.-4      	; 0x154 <wait_1ms+0x1e>
 158:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	87 bb       	out	0x17, r24	; 23
 160:	08 95       	ret

00000162 <delay>:
 162:	0f 93       	push	r16
 164:	1f 93       	push	r17
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	18 16       	cp	r1, r24
 16c:	19 06       	cpc	r1, r25
 16e:	4c f4       	brge	.+18     	; 0x182 <delay+0x20>
 170:	8c 01       	movw	r16, r24
 172:	c0 e0       	ldi	r28, 0x00	; 0
 174:	d0 e0       	ldi	r29, 0x00	; 0
 176:	0e 94 9b 00 	call	0x136	; 0x136 <wait_1ms>
 17a:	21 96       	adiw	r28, 0x01	; 1
 17c:	0c 17       	cp	r16, r28
 17e:	1d 07       	cpc	r17, r29
 180:	d1 f7       	brne	.-12     	; 0x176 <delay+0x14>
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	1f 91       	pop	r17
 188:	0f 91       	pop	r16
 18a:	08 95       	ret

0000018c <change_duty_cycle>:

int change_duty_cycle(int sensor_read) {
	//change the duty cycle based on the distance
	if (sensor_read > 60) {
 18c:	8d 33       	cpi	r24, 0x3D	; 61
 18e:	91 05       	cpc	r25, r1
 190:	a4 f4       	brge	.+40     	; 0x1ba <change_duty_cycle+0x2e>
		return 1;
	}
	else if (sensor_read > 65) {
 192:	82 34       	cpi	r24, 0x42	; 66
 194:	91 05       	cpc	r25, r1
 196:	a4 f4       	brge	.+40     	; 0x1c0 <change_duty_cycle+0x34>
		return 140;
	}
	else if (sensor_read > 55) {
 198:	88 33       	cpi	r24, 0x38	; 56
 19a:	91 05       	cpc	r25, r1
 19c:	a4 f4       	brge	.+40     	; 0x1c6 <change_duty_cycle+0x3a>
		return 160;
	}
	else if (sensor_read > 45) {
 19e:	8e 32       	cpi	r24, 0x2E	; 46
 1a0:	91 05       	cpc	r25, r1
 1a2:	a4 f4       	brge	.+40     	; 0x1cc <change_duty_cycle+0x40>
		return 190;
	}
	else if (sensor_read > 30) {
 1a4:	8f 31       	cpi	r24, 0x1F	; 31
 1a6:	91 05       	cpc	r25, r1
 1a8:	a4 f4       	brge	.+40     	; 0x1d2 <change_duty_cycle+0x46>
		return 210;
	}
	else if (sensor_read > 25) {
 1aa:	8a 31       	cpi	r24, 0x1A	; 26
 1ac:	91 05       	cpc	r25, r1
 1ae:	a4 f4       	brge	.+40     	; 0x1d8 <change_duty_cycle+0x4c>
		return 230;
	}
	else if (sensor_read > 15) {
 1b0:	40 97       	sbiw	r24, 0x10	; 16
 1b2:	ac f4       	brge	.+42     	; 0x1de <change_duty_cycle+0x52>
		return 250;
	}
	else {
		return 1;
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	08 95       	ret
}

int change_duty_cycle(int sensor_read) {
	//change the duty cycle based on the distance
	if (sensor_read > 60) {
		return 1;
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	08 95       	ret
	}
	else if (sensor_read > 65) {
		return 140;
 1c0:	8c e8       	ldi	r24, 0x8C	; 140
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	08 95       	ret
	}
	else if (sensor_read > 55) {
		return 160;
 1c6:	80 ea       	ldi	r24, 0xA0	; 160
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	08 95       	ret
	}
	else if (sensor_read > 45) {
		return 190;
 1cc:	8e eb       	ldi	r24, 0xBE	; 190
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	08 95       	ret
	}
	else if (sensor_read > 30) {
		return 210;
 1d2:	82 ed       	ldi	r24, 0xD2	; 210
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	08 95       	ret
	}
	else if (sensor_read > 25) {
		return 230;
 1d8:	86 ee       	ldi	r24, 0xE6	; 230
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	08 95       	ret
	}
	else if (sensor_read > 15) {
		return 250;
 1de:	8a ef       	ldi	r24, 0xFA	; 250
 1e0:	90 e0       	ldi	r25, 0x00	; 0
	}
	else {
		return 1;
	}
}
 1e2:	08 95       	ret

000001e4 <setOCRA>:

void setOCRA(int value)
{
	TCCR0B = 0;
 1e4:	15 bc       	out	0x25, r1	; 37
	TCNT0 = 0;
 1e6:	16 bc       	out	0x26, r1	; 38
	OCR0A = value;
 1e8:	87 bd       	out	0x27, r24	; 39
	TCCR0B = 0x05;
 1ea:	85 e0       	ldi	r24, 0x05	; 5
 1ec:	85 bd       	out	0x25, r24	; 37
 1ee:	08 95       	ret

000001f0 <startup_sequence>:
}

void startup_sequence() {
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	c2 e0       	ldi	r28, 0x02	; 2
 1f6:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i<2; i++) {
		setOCRA(200);
 1f8:	88 ec       	ldi	r24, 0xC8	; 200
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <setOCRA>
		delay(100);
 200:	84 e6       	ldi	r24, 0x64	; 100
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 b1 00 	call	0x162	; 0x162 <delay>
		setOCRA(150);
 208:	86 e9       	ldi	r24, 0x96	; 150
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <setOCRA>
		delay(100);
 210:	84 e6       	ldi	r24, 0x64	; 100
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 b1 00 	call	0x162	; 0x162 <delay>
		setOCRA(50);
 218:	82 e3       	ldi	r24, 0x32	; 50
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <setOCRA>
		delay(200);
 220:	88 ec       	ldi	r24, 0xC8	; 200
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 b1 00 	call	0x162	; 0x162 <delay>
		setOCRA(250);
 228:	8a ef       	ldi	r24, 0xFA	; 250
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <setOCRA>
		delay(1000);
 230:	88 ee       	ldi	r24, 0xE8	; 232
 232:	93 e0       	ldi	r25, 0x03	; 3
 234:	0e 94 b1 00 	call	0x162	; 0x162 <delay>
		setOCRA(0);
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <setOCRA>
		delay(500);
 240:	84 ef       	ldi	r24, 0xF4	; 244
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	0e 94 b1 00 	call	0x162	; 0x162 <delay>
 248:	21 97       	sbiw	r28, 0x01	; 1
	OCR0A = value;
	TCCR0B = 0x05;
}

void startup_sequence() {
	for (int i = 0; i<2; i++) {
 24a:	b1 f6       	brne	.-84     	; 0x1f8 <startup_sequence+0x8>
		delay(1000);
		setOCRA(0);
		delay(500);
	}
	return;
}
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <main>:

int main() {
 252:	1f 93       	push	r17
 254:	cf 93       	push	r28
 256:	df 93       	push	r29
	
	init();
 258:	0e 94 53 00 	call	0xa6	; 0xa6 <init>
	while (power==0) {
 25c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <power>
 260:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <power+0x1>
 264:	89 2b       	or	r24, r25
 266:	d1 f3       	breq	.-12     	; 0x25c <main+0xa>
		//wait
	}
	TCCR0B = 0x05;
 268:	85 e0       	ldi	r24, 0x05	; 5
 26a:	85 bd       	out	0x25, r24	; 37
	TCCR0A = 0x83;
 26c:	83 e8       	ldi	r24, 0x83	; 131
 26e:	84 bd       	out	0x24, r24	; 36
	startup_sequence();
 270:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <startup_sequence>
	initADC();
 274:	0e 94 71 00 	call	0xe2	; 0xe2 <initADC>
 	while (power==1) {
 278:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <power>
 27c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <power+0x1>
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	39 f5       	brne	.+78     	; 0x2d2 <main+0x80>
		 setup_done = 1;
 284:	c1 e0       	ldi	r28, 0x01	; 1
 286:	d0 e0       	ldi	r29, 0x00	; 0
		 if (power==0) {
			 TCCR0B = 0x00;
			 TCCR0A = 0x83;
 288:	13 e8       	ldi	r17, 0x83	; 131
	TCCR0B = 0x05;
	TCCR0A = 0x83;
	startup_sequence();
	initADC();
 	while (power==1) {
		 setup_done = 1;
 28a:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_end+0x1>
 28e:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_end>
		 if (power==0) {
 292:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <power>
 296:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <power+0x1>
 29a:	89 2b       	or	r24, r25
 29c:	19 f4       	brne	.+6      	; 0x2a4 <main+0x52>
			 TCCR0B = 0x00;
 29e:	15 bc       	out	0x25, r1	; 37
			 TCCR0A = 0x83;
 2a0:	14 bd       	out	0x24, r17	; 36
			 PORTD &= ~(1<<6);
 2a2:	5e 98       	cbi	0x0b, 6	; 11
			 
		 }
		
		doADC();
 2a4:	0e 94 81 00 	call	0x102	; 0x102 <doADC>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a8:	2f ef       	ldi	r18, 0xFF	; 255
 2aa:	83 ec       	ldi	r24, 0xC3	; 195
 2ac:	99 e0       	ldi	r25, 0x09	; 9
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	80 40       	sbci	r24, 0x00	; 0
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x5c>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0x66>
 2b8:	00 00       	nop
		
		_delay_ms(200); 						// To allow sufficient time between queries (60ms min)
		PORTD |= (1<<4);						// Set trigger high
 2ba:	5c 9a       	sbi	0x0b, 4	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2bc:	25 e3       	ldi	r18, 0x35	; 53
 2be:	2a 95       	dec	r18
 2c0:	f1 f7       	brne	.-4      	; 0x2be <main+0x6c>
 2c2:	00 00       	nop
		_delay_us(10);							// for 10uS
		PORTD &= ~(1<<4);
 2c4:	5c 98       	cbi	0x0b, 4	; 11
	}
	TCCR0B = 0x05;
	TCCR0A = 0x83;
	startup_sequence();
	initADC();
 	while (power==1) {
 2c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <power>
 2ca:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <power+0x1>
 2ce:	01 97       	sbiw	r24, 0x01	; 1
 2d0:	e1 f2       	breq	.-72     	; 0x28a <main+0x38>
		PORTD |= (1<<4);						// Set trigger high
		_delay_us(10);							// for 10uS
		PORTD &= ~(1<<4);
			
	}
	setup_done = 0;
 2d2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
 2d6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
	power = 0;
 2da:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <power+0x1>
 2de:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <power>
	main();
 2e2:	0e 94 29 01 	call	0x252	; 0x252 <main>
	
}
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	1f 91       	pop	r17
 2f0:	08 95       	ret

000002f2 <update_value>:

void update_value(int value) 
{
	TCCR0B = 0;
 2f2:	15 bc       	out	0x25, r1	; 37
	TCNT0 = 0;
 2f4:	16 bc       	out	0x26, r1	; 38
	OCR0A = change_duty_cycle(value);
 2f6:	0e 94 c6 00 	call	0x18c	; 0x18c <change_duty_cycle>
 2fa:	87 bd       	out	0x27, r24	; 39
	//OCR0A = alternative_duty_change(value);
	TCCR0B = 0x05;
 2fc:	85 e0       	ldi	r24, 0x05	; 5
 2fe:	85 bd       	out	0x25, r24	; 37
	TCCR0A = 0x83;
 300:	83 e8       	ldi	r24, 0x83	; 131
 302:	84 bd       	out	0x24, r24	; 36
 304:	08 95       	ret

00000306 <__vector_2>:
	return;
}

ISR(INT1_vect)
{
 306:	1f 92       	push	r1
 308:	0f 92       	push	r0
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	0f 92       	push	r0
 30e:	11 24       	eor	r1, r1
 310:	2f 93       	push	r18
 312:	3f 93       	push	r19
 314:	4f 93       	push	r20
 316:	5f 93       	push	r21
 318:	6f 93       	push	r22
 31a:	7f 93       	push	r23
 31c:	8f 93       	push	r24
 31e:	9f 93       	push	r25
 320:	af 93       	push	r26
 322:	bf 93       	push	r27
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	ef 93       	push	r30
 32a:	ff 93       	push	r31
	if(i == 0)
 32c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <i>
 330:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <i+0x1>
 334:	89 2b       	or	r24, r25
 336:	51 f4       	brne	.+20     	; 0x34c <__vector_2+0x46>
	{
		TCCR1B = 2;
 338:	82 e0       	ldi	r24, 0x02	; 2
 33a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		i = 1;
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <i+0x1>
 346:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <i>
 34a:	1d c0       	rjmp	.+58     	; 0x386 <__vector_2+0x80>
		
	}
	else
	{
		TCCR1B = 0;
 34c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
		uint16_t pulse = TCNT1;
 350:	c4 e8       	ldi	r28, 0x84	; 132
 352:	d0 e0       	ldi	r29, 0x00	; 0
 354:	28 81       	ld	r18, Y
 356:	39 81       	ldd	r19, Y+1	; 0x01
		cm = (pulse/58);
 358:	af e9       	ldi	r26, 0x9F	; 159
 35a:	b6 e4       	ldi	r27, 0x46	; 70
 35c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <__umulhisi3>
 360:	92 95       	swap	r25
 362:	82 95       	swap	r24
 364:	8f 70       	andi	r24, 0x0F	; 15
 366:	89 27       	eor	r24, r25
 368:	9f 70       	andi	r25, 0x0F	; 15
 36a:	89 27       	eor	r24, r25
 36c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <cm>
		update_value(cm);
 370:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <cm>
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 79 01 	call	0x2f2	; 0x2f2 <update_value>
		TCNT1 = 0;
 37a:	19 82       	std	Y+1, r1	; 0x01
 37c:	18 82       	st	Y, r1
		i = 0;
 37e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <i+0x1>
 382:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <i>
		
	}
}
 386:	ff 91       	pop	r31
 388:	ef 91       	pop	r30
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	bf 91       	pop	r27
 390:	af 91       	pop	r26
 392:	9f 91       	pop	r25
 394:	8f 91       	pop	r24
 396:	7f 91       	pop	r23
 398:	6f 91       	pop	r22
 39a:	5f 91       	pop	r21
 39c:	4f 91       	pop	r20
 39e:	3f 91       	pop	r19
 3a0:	2f 91       	pop	r18
 3a2:	0f 90       	pop	r0
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	0f 90       	pop	r0
 3a8:	1f 90       	pop	r1
 3aa:	18 95       	reti

000003ac <__vector_1>:
ISR (INT0_vect) {
 3ac:	1f 92       	push	r1
 3ae:	0f 92       	push	r0
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	0f 92       	push	r0
 3b4:	11 24       	eor	r1, r1
 3b6:	8f 93       	push	r24
 3b8:	9f 93       	push	r25
	if (setup_done==0) {
 3ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 3be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 3c2:	89 2b       	or	r24, r25
 3c4:	39 f4       	brne	.+14     	; 0x3d4 <__vector_1+0x28>
		power = 1;
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <power+0x1>
 3ce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <power>
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <__vector_1+0x30>
	}
	else {
		power = 0;
 3d4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <power+0x1>
 3d8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <power>
	}
	
}
 3dc:	9f 91       	pop	r25
 3de:	8f 91       	pop	r24
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <__umulhisi3>:
 3ea:	a2 9f       	mul	r26, r18
 3ec:	b0 01       	movw	r22, r0
 3ee:	b3 9f       	mul	r27, r19
 3f0:	c0 01       	movw	r24, r0
 3f2:	a3 9f       	mul	r26, r19
 3f4:	70 0d       	add	r23, r0
 3f6:	81 1d       	adc	r24, r1
 3f8:	11 24       	eor	r1, r1
 3fa:	91 1d       	adc	r25, r1
 3fc:	b2 9f       	mul	r27, r18
 3fe:	70 0d       	add	r23, r0
 400:	81 1d       	adc	r24, r1
 402:	11 24       	eor	r1, r1
 404:	91 1d       	adc	r25, r1
 406:	08 95       	ret

00000408 <_exit>:
 408:	f8 94       	cli

0000040a <__stop_program>:
 40a:	ff cf       	rjmp	.-2      	; 0x40a <__stop_program>
